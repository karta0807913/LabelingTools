// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/protobuf/map_proto2_unittest.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include <google/protobuf/map_proto2_unittest.pb.h>

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protobuf_unittest {
class TestEnumMapDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TestEnumMap> {
} _TestEnumMap_default_instance_;
class TestEnumMapPlusExtraDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TestEnumMapPlusExtra> {
} _TestEnumMapPlusExtra_default_instance_;
class TestImportEnumMapDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TestImportEnumMap> {
} _TestImportEnumMap_default_instance_;
class TestIntIntMapDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TestIntIntMap> {
} _TestIntIntMap_default_instance_;
class TestMapsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TestMaps> {
} _TestMaps_default_instance_;

namespace protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[23];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestEnumMap, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestEnumMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestEnumMap, known_map_field_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestEnumMap, unknown_map_field_),
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestEnumMapPlusExtra, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestEnumMapPlusExtra, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestEnumMapPlusExtra, known_map_field_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestEnumMapPlusExtra, unknown_map_field_),
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestImportEnumMap, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestImportEnumMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestImportEnumMap, import_enum_amp_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestIntIntMap, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestIntIntMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestIntIntMap, m_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMaps, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMaps, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMaps, m_int32_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMaps, m_int64_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMaps, m_uint32_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMaps, m_uint64_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMaps, m_sint32_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMaps, m_sint64_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMaps, m_fixed32_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMaps, m_fixed64_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMaps, m_sfixed32_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMaps, m_sfixed64_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMaps, m_bool_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMaps, m_string_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 6, sizeof(TestEnumMap)},
  { 8, 14, sizeof(TestEnumMapPlusExtra)},
  { 16, 21, sizeof(TestImportEnumMap)},
  { 22, 27, sizeof(TestIntIntMap)},
  { 28, 44, sizeof(TestMaps)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_TestEnumMap_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TestEnumMapPlusExtra_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TestImportEnumMap_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TestIntIntMap_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TestMaps_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "google/protobuf/map_proto2_unittest.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 23);
  const ::google::protobuf::Descriptor* TestEnumMap_KnownMapFieldEntry_descriptor = protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::file_level_metadata[0].descriptor;
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        TestEnumMap_KnownMapFieldEntry_descriptor,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::int32,
            ::protobuf_unittest::Proto2MapEnum,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
            ::google::protobuf::internal::WireFormatLite::TYPE_ENUM,
            0>::CreateDefaultInstance(
                TestEnumMap_KnownMapFieldEntry_descriptor));
  const ::google::protobuf::Descriptor* TestEnumMap_UnknownMapFieldEntry_descriptor = protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::file_level_metadata[1].descriptor;
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        TestEnumMap_UnknownMapFieldEntry_descriptor,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::int32,
            ::protobuf_unittest::Proto2MapEnum,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
            ::google::protobuf::internal::WireFormatLite::TYPE_ENUM,
            0>::CreateDefaultInstance(
                TestEnumMap_UnknownMapFieldEntry_descriptor));
  const ::google::protobuf::Descriptor* TestEnumMapPlusExtra_KnownMapFieldEntry_descriptor = protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::file_level_metadata[3].descriptor;
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        TestEnumMapPlusExtra_KnownMapFieldEntry_descriptor,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::int32,
            ::protobuf_unittest::Proto2MapEnumPlusExtra,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
            ::google::protobuf::internal::WireFormatLite::TYPE_ENUM,
            0>::CreateDefaultInstance(
                TestEnumMapPlusExtra_KnownMapFieldEntry_descriptor));
  const ::google::protobuf::Descriptor* TestEnumMapPlusExtra_UnknownMapFieldEntry_descriptor = protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::file_level_metadata[4].descriptor;
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        TestEnumMapPlusExtra_UnknownMapFieldEntry_descriptor,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::int32,
            ::protobuf_unittest::Proto2MapEnumPlusExtra,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
            ::google::protobuf::internal::WireFormatLite::TYPE_ENUM,
            0>::CreateDefaultInstance(
                TestEnumMapPlusExtra_UnknownMapFieldEntry_descriptor));
  const ::google::protobuf::Descriptor* TestImportEnumMap_ImportEnumAmpEntry_descriptor = protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::file_level_metadata[6].descriptor;
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        TestImportEnumMap_ImportEnumAmpEntry_descriptor,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::int32,
            ::protobuf_unittest_import::ImportEnumForMap,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
            ::google::protobuf::internal::WireFormatLite::TYPE_ENUM,
            0>::CreateDefaultInstance(
                TestImportEnumMap_ImportEnumAmpEntry_descriptor));
  const ::google::protobuf::Descriptor* TestIntIntMap_MEntry_descriptor = protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::file_level_metadata[8].descriptor;
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        TestIntIntMap_MEntry_descriptor,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::int32,
            ::google::protobuf::int32,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
            0>::CreateDefaultInstance(
                TestIntIntMap_MEntry_descriptor));
  const ::google::protobuf::Descriptor* TestMaps_MInt32Entry_descriptor = protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::file_level_metadata[10].descriptor;
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        TestMaps_MInt32Entry_descriptor,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::int32,
            ::protobuf_unittest::TestIntIntMap,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                TestMaps_MInt32Entry_descriptor));
  const ::google::protobuf::Descriptor* TestMaps_MInt64Entry_descriptor = protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::file_level_metadata[11].descriptor;
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        TestMaps_MInt64Entry_descriptor,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::int64,
            ::protobuf_unittest::TestIntIntMap,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                TestMaps_MInt64Entry_descriptor));
  const ::google::protobuf::Descriptor* TestMaps_MUint32Entry_descriptor = protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::file_level_metadata[12].descriptor;
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        TestMaps_MUint32Entry_descriptor,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::uint32,
            ::protobuf_unittest::TestIntIntMap,
            ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                TestMaps_MUint32Entry_descriptor));
  const ::google::protobuf::Descriptor* TestMaps_MUint64Entry_descriptor = protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::file_level_metadata[13].descriptor;
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        TestMaps_MUint64Entry_descriptor,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::uint64,
            ::protobuf_unittest::TestIntIntMap,
            ::google::protobuf::internal::WireFormatLite::TYPE_UINT64,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                TestMaps_MUint64Entry_descriptor));
  const ::google::protobuf::Descriptor* TestMaps_MSint32Entry_descriptor = protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::file_level_metadata[14].descriptor;
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        TestMaps_MSint32Entry_descriptor,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::int32,
            ::protobuf_unittest::TestIntIntMap,
            ::google::protobuf::internal::WireFormatLite::TYPE_SINT32,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                TestMaps_MSint32Entry_descriptor));
  const ::google::protobuf::Descriptor* TestMaps_MSint64Entry_descriptor = protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::file_level_metadata[15].descriptor;
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        TestMaps_MSint64Entry_descriptor,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::int64,
            ::protobuf_unittest::TestIntIntMap,
            ::google::protobuf::internal::WireFormatLite::TYPE_SINT64,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                TestMaps_MSint64Entry_descriptor));
  const ::google::protobuf::Descriptor* TestMaps_MFixed32Entry_descriptor = protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::file_level_metadata[16].descriptor;
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        TestMaps_MFixed32Entry_descriptor,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::uint32,
            ::protobuf_unittest::TestIntIntMap,
            ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                TestMaps_MFixed32Entry_descriptor));
  const ::google::protobuf::Descriptor* TestMaps_MFixed64Entry_descriptor = protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::file_level_metadata[17].descriptor;
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        TestMaps_MFixed64Entry_descriptor,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::uint64,
            ::protobuf_unittest::TestIntIntMap,
            ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                TestMaps_MFixed64Entry_descriptor));
  const ::google::protobuf::Descriptor* TestMaps_MSfixed32Entry_descriptor = protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::file_level_metadata[18].descriptor;
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        TestMaps_MSfixed32Entry_descriptor,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::int32,
            ::protobuf_unittest::TestIntIntMap,
            ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                TestMaps_MSfixed32Entry_descriptor));
  const ::google::protobuf::Descriptor* TestMaps_MSfixed64Entry_descriptor = protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::file_level_metadata[19].descriptor;
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        TestMaps_MSfixed64Entry_descriptor,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::int64,
            ::protobuf_unittest::TestIntIntMap,
            ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                TestMaps_MSfixed64Entry_descriptor));
  const ::google::protobuf::Descriptor* TestMaps_MBoolEntry_descriptor = protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::file_level_metadata[20].descriptor;
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        TestMaps_MBoolEntry_descriptor,
        ::google::protobuf::internal::MapEntry<
            bool,
            ::protobuf_unittest::TestIntIntMap,
            ::google::protobuf::internal::WireFormatLite::TYPE_BOOL,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                TestMaps_MBoolEntry_descriptor));
  const ::google::protobuf::Descriptor* TestMaps_MStringEntry_descriptor = protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::file_level_metadata[21].descriptor;
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        TestMaps_MStringEntry_descriptor,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::protobuf_unittest::TestIntIntMap,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                TestMaps_MStringEntry_descriptor));
}

}  // namespace

void TableStruct::Shutdown() {
  _TestEnumMap_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _TestEnumMapPlusExtra_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _TestImportEnumMap_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _TestIntIntMap_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _TestMaps_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::protobuf_unittest_import::protobuf_google_2fprotobuf_2funittest_5fimport_2eproto::InitDefaults();
  _TestEnumMap_default_instance_.DefaultConstruct();
  _TestEnumMapPlusExtra_default_instance_.DefaultConstruct();
  _TestImportEnumMap_default_instance_.DefaultConstruct();
  _TestIntIntMap_default_instance_.DefaultConstruct();
  _TestMaps_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n)google/protobuf/map_proto2_unittest.pr"
      "oto\022\021protobuf_unittest\032%google/protobuf/"
      "unittest_import.proto\"\333\002\n\013TestEnumMap\022J\n"
      "\017known_map_field\030e \003(\01321.protobuf_unitte"
      "st.TestEnumMap.KnownMapFieldEntry\022N\n\021unk"
      "nown_map_field\030f \003(\01323.protobuf_unittest"
      ".TestEnumMap.UnknownMapFieldEntry\032V\n\022Kno"
      "wnMapFieldEntry\022\013\n\003key\030\001 \001(\005\022/\n\005value\030\002 "
      "\001(\0162 .protobuf_unittest.Proto2MapEnum:\0028"
      "\001\032X\n\024UnknownMapFieldEntry\022\013\n\003key\030\001 \001(\005\022/"
      "\n\005value\030\002 \001(\0162 .protobuf_unittest.Proto2"
      "MapEnum:\0028\001\"\210\003\n\024TestEnumMapPlusExtra\022S\n\017"
      "known_map_field\030e \003(\0132:.protobuf_unittes"
      "t.TestEnumMapPlusExtra.KnownMapFieldEntr"
      "y\022W\n\021unknown_map_field\030f \003(\0132<.protobuf_"
      "unittest.TestEnumMapPlusExtra.UnknownMap"
      "FieldEntry\032_\n\022KnownMapFieldEntry\022\013\n\003key\030"
      "\001 \001(\005\0228\n\005value\030\002 \001(\0162).protobuf_unittest"
      ".Proto2MapEnumPlusExtra:\0028\001\032a\n\024UnknownMa"
      "pFieldEntry\022\013\n\003key\030\001 \001(\005\0228\n\005value\030\002 \001(\0162"
      ").protobuf_unittest.Proto2MapEnumPlusExt"
      "ra:\0028\001\"\307\001\n\021TestImportEnumMap\022P\n\017import_e"
      "num_amp\030\001 \003(\01327.protobuf_unittest.TestIm"
      "portEnumMap.ImportEnumAmpEntry\032`\n\022Import"
      "EnumAmpEntry\022\013\n\003key\030\001 \001(\005\0229\n\005value\030\002 \001(\016"
      "2*.protobuf_unittest_import.ImportEnumFo"
      "rMap:\0028\001\"m\n\rTestIntIntMap\0222\n\001m\030\001 \003(\0132\'.p"
      "rotobuf_unittest.TestIntIntMap.MEntry\032(\n"
      "\006MEntry\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\005:\0028\001\""
      "\270\r\n\010TestMaps\0228\n\007m_int32\030\001 \003(\0132\'.protobuf"
      "_unittest.TestMaps.MInt32Entry\0228\n\007m_int6"
      "4\030\002 \003(\0132\'.protobuf_unittest.TestMaps.MIn"
      "t64Entry\022:\n\010m_uint32\030\003 \003(\0132(.protobuf_un"
      "ittest.TestMaps.MUint32Entry\022:\n\010m_uint64"
      "\030\004 \003(\0132(.protobuf_unittest.TestMaps.MUin"
      "t64Entry\022:\n\010m_sint32\030\005 \003(\0132(.protobuf_un"
      "ittest.TestMaps.MSint32Entry\022:\n\010m_sint64"
      "\030\006 \003(\0132(.protobuf_unittest.TestMaps.MSin"
      "t64Entry\022<\n\tm_fixed32\030\007 \003(\0132).protobuf_u"
      "nittest.TestMaps.MFixed32Entry\022<\n\tm_fixe"
      "d64\030\010 \003(\0132).protobuf_unittest.TestMaps.M"
      "Fixed64Entry\022>\n\nm_sfixed32\030\t \003(\0132*.proto"
      "buf_unittest.TestMaps.MSfixed32Entry\022>\n\n"
      "m_sfixed64\030\n \003(\0132*.protobuf_unittest.Tes"
      "tMaps.MSfixed64Entry\0226\n\006m_bool\030\013 \003(\0132&.p"
      "rotobuf_unittest.TestMaps.MBoolEntry\022:\n\010"
      "m_string\030\014 \003(\0132(.protobuf_unittest.TestM"
      "aps.MStringEntry\032O\n\013MInt32Entry\022\013\n\003key\030\001"
      " \001(\005\022/\n\005value\030\002 \001(\0132 .protobuf_unittest."
      "TestIntIntMap:\0028\001\032O\n\013MInt64Entry\022\013\n\003key\030"
      "\001 \001(\003\022/\n\005value\030\002 \001(\0132 .protobuf_unittest"
      ".TestIntIntMap:\0028\001\032P\n\014MUint32Entry\022\013\n\003ke"
      "y\030\001 \001(\r\022/\n\005value\030\002 \001(\0132 .protobuf_unitte"
      "st.TestIntIntMap:\0028\001\032P\n\014MUint64Entry\022\013\n\003"
      "key\030\001 \001(\004\022/\n\005value\030\002 \001(\0132 .protobuf_unit"
      "test.TestIntIntMap:\0028\001\032P\n\014MSint32Entry\022\013"
      "\n\003key\030\001 \001(\021\022/\n\005value\030\002 \001(\0132 .protobuf_un"
      "ittest.TestIntIntMap:\0028\001\032P\n\014MSint64Entry"
      "\022\013\n\003key\030\001 \001(\022\022/\n\005value\030\002 \001(\0132 .protobuf_"
      "unittest.TestIntIntMap:\0028\001\032Q\n\rMFixed32En"
      "try\022\013\n\003key\030\001 \001(\007\022/\n\005value\030\002 \001(\0132 .protob"
      "uf_unittest.TestIntIntMap:\0028\001\032Q\n\rMFixed6"
      "4Entry\022\013\n\003key\030\001 \001(\006\022/\n\005value\030\002 \001(\0132 .pro"
      "tobuf_unittest.TestIntIntMap:\0028\001\032R\n\016MSfi"
      "xed32Entry\022\013\n\003key\030\001 \001(\017\022/\n\005value\030\002 \001(\0132 "
      ".protobuf_unittest.TestIntIntMap:\0028\001\032R\n\016"
      "MSfixed64Entry\022\013\n\003key\030\001 \001(\020\022/\n\005value\030\002 \001"
      "(\0132 .protobuf_unittest.TestIntIntMap:\0028\001"
      "\032N\n\nMBoolEntry\022\013\n\003key\030\001 \001(\010\022/\n\005value\030\002 \001"
      "(\0132 .protobuf_unittest.TestIntIntMap:\0028\001"
      "\032P\n\014MStringEntry\022\013\n\003key\030\001 \001(\t\022/\n\005value\030\002"
      " \001(\0132 .protobuf_unittest.TestIntIntMap:\002"
      "8\001*Z\n\rProto2MapEnum\022\027\n\023PROTO2_MAP_ENUM_F"
      "OO\020\000\022\027\n\023PROTO2_MAP_ENUM_BAR\020\001\022\027\n\023PROTO2_"
      "MAP_ENUM_BAZ\020\002*\206\001\n\026Proto2MapEnumPlusExtr"
      "a\022\031\n\025E_PROTO2_MAP_ENUM_FOO\020\000\022\031\n\025E_PROTO2"
      "_MAP_ENUM_BAR\020\001\022\031\n\025E_PROTO2_MAP_ENUM_BAZ"
      "\020\002\022\033\n\027E_PROTO2_MAP_ENUM_EXTRA\020\003B\003\370\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3116);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/protobuf/map_proto2_unittest.proto", &protobuf_RegisterTypes);
  ::protobuf_unittest_import::protobuf_google_2fprotobuf_2funittest_5fimport_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto

const ::google::protobuf::EnumDescriptor* Proto2MapEnum_descriptor() {
  protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::file_level_enum_descriptors[0];
}
bool Proto2MapEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Proto2MapEnumPlusExtra_descriptor() {
  protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::file_level_enum_descriptors[1];
}
bool Proto2MapEnumPlusExtra_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestEnumMap::kKnownMapFieldFieldNumber;
const int TestEnumMap::kUnknownMapFieldFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TestEnumMap::TestEnumMap()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestEnumMap)
}
TestEnumMap::TestEnumMap(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  known_map_field_(arena),
  unknown_map_field_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestEnumMap)
}
TestEnumMap::TestEnumMap(const TestEnumMap& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  const ::google::protobuf::Descriptor*& TestEnumMap_KnownMapFieldEntry_descriptor = protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::file_level_metadata[0].descriptor;
  const ::google::protobuf::Descriptor*& TestEnumMap_UnknownMapFieldEntry_descriptor = protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::file_level_metadata[1].descriptor;
  known_map_field_.SetAssignDescriptorCallback(
      protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::protobuf_AssignDescriptorsOnce);
  known_map_field_.SetEntryDescriptor(
      &TestEnumMap_KnownMapFieldEntry_descriptor);
  known_map_field_.MergeFrom(from.known_map_field_);
  unknown_map_field_.SetAssignDescriptorCallback(
      protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::protobuf_AssignDescriptorsOnce);
  unknown_map_field_.SetEntryDescriptor(
      &TestEnumMap_UnknownMapFieldEntry_descriptor);
  unknown_map_field_.MergeFrom(from.unknown_map_field_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestEnumMap)
}

void TestEnumMap::SharedCtor() {
  _cached_size_ = 0;
  const ::google::protobuf::Descriptor*& TestEnumMap_KnownMapFieldEntry_descriptor = protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::file_level_metadata[0].descriptor;
  const ::google::protobuf::Descriptor*& TestEnumMap_UnknownMapFieldEntry_descriptor = protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::file_level_metadata[1].descriptor;
  known_map_field_.SetAssignDescriptorCallback(
      protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::protobuf_AssignDescriptorsOnce);
  known_map_field_.SetEntryDescriptor(
      &TestEnumMap_KnownMapFieldEntry_descriptor);
  unknown_map_field_.SetAssignDescriptorCallback(
      protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::protobuf_AssignDescriptorsOnce);
  unknown_map_field_.SetEntryDescriptor(
      &TestEnumMap_UnknownMapFieldEntry_descriptor);
}

TestEnumMap::~TestEnumMap() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestEnumMap)
  SharedDtor();
}

void TestEnumMap::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void TestEnumMap::ArenaDtor(void* object) {
  TestEnumMap* _this = reinterpret_cast< TestEnumMap* >(object);
  (void)_this;
}
void TestEnumMap::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void TestEnumMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestEnumMap::descriptor() {
  protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::file_level_metadata[2].descriptor;
}

const TestEnumMap& TestEnumMap::default_instance() {
  protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::InitDefaults();
  return *internal_default_instance();
}

TestEnumMap* TestEnumMap::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<TestEnumMap>(arena);
}

void TestEnumMap::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestEnumMap)
  known_map_field_.Clear();
  unknown_map_field_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TestEnumMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobuf_unittest.TestEnumMap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<int32, .protobuf_unittest.Proto2MapEnum> known_map_field = 101;
      case 101: {
        if (tag == 810u) {
          DO_(input->IncrementRecursionDepth());
          ::google::protobuf::scoped_ptr<TestEnumMap_KnownMapFieldEntry> entry(known_map_field_.NewEntry());
          {
            ::std::string data;
            DO_(::google::protobuf::internal::WireFormatLite::ReadString(input, &data));
            DO_(entry->ParseFromString(data));
            if (::protobuf_unittest::Proto2MapEnum_IsValid(*entry->mutable_value())) {
              (*mutable_known_map_field())[entry->key()] =
                  static_cast< ::protobuf_unittest::Proto2MapEnum >(*entry->mutable_value());
            } else {
              mutable_unknown_fields()->AddLengthDelimited(101, data);
            }
          }
          if (entry->GetArena() != NULL) entry.release();
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<int32, .protobuf_unittest.Proto2MapEnum> unknown_map_field = 102;
      case 102: {
        if (tag == 818u) {
          DO_(input->IncrementRecursionDepth());
          ::google::protobuf::scoped_ptr<TestEnumMap_UnknownMapFieldEntry> entry(unknown_map_field_.NewEntry());
          {
            ::std::string data;
            DO_(::google::protobuf::internal::WireFormatLite::ReadString(input, &data));
            DO_(entry->ParseFromString(data));
            if (::protobuf_unittest::Proto2MapEnum_IsValid(*entry->mutable_value())) {
              (*mutable_unknown_map_field())[entry->key()] =
                  static_cast< ::protobuf_unittest::Proto2MapEnum >(*entry->mutable_value());
            } else {
              mutable_unknown_fields()->AddLengthDelimited(102, data);
            }
          }
          if (entry->GetArena() != NULL) entry.release();
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobuf_unittest.TestEnumMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobuf_unittest.TestEnumMap)
  return false;
#undef DO_
}

void TestEnumMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobuf_unittest.TestEnumMap)
  // map<int32, .protobuf_unittest.Proto2MapEnum> known_map_field = 101;
  if (!this->known_map_field().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest::Proto2MapEnum >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->known_map_field().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->known_map_field().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest::Proto2MapEnum >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest::Proto2MapEnum >::const_iterator
          it = this->known_map_field().begin();
          it != this->known_map_field().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TestEnumMap_KnownMapFieldEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(known_map_field_.NewEnumEntryWrapper(
            items[i].second->first, items[i].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            101, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
      }
    } else {
      ::google::protobuf::scoped_ptr<TestEnumMap_KnownMapFieldEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest::Proto2MapEnum >::const_iterator
          it = this->known_map_field().begin();
          it != this->known_map_field().end(); ++it) {
        entry.reset(known_map_field_.NewEnumEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            101, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
      }
    }
  }

  // map<int32, .protobuf_unittest.Proto2MapEnum> unknown_map_field = 102;
  if (!this->unknown_map_field().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest::Proto2MapEnum >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->unknown_map_field().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->unknown_map_field().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest::Proto2MapEnum >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest::Proto2MapEnum >::const_iterator
          it = this->unknown_map_field().begin();
          it != this->unknown_map_field().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TestEnumMap_UnknownMapFieldEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(unknown_map_field_.NewEnumEntryWrapper(
            items[i].second->first, items[i].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            102, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
      }
    } else {
      ::google::protobuf::scoped_ptr<TestEnumMap_UnknownMapFieldEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest::Proto2MapEnum >::const_iterator
          it = this->unknown_map_field().begin();
          it != this->unknown_map_field().end(); ++it) {
        entry.reset(unknown_map_field_.NewEnumEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            102, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protobuf_unittest.TestEnumMap)
}

::google::protobuf::uint8* TestEnumMap::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestEnumMap)
  // map<int32, .protobuf_unittest.Proto2MapEnum> known_map_field = 101;
  if (!this->known_map_field().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest::Proto2MapEnum >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->known_map_field().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->known_map_field().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest::Proto2MapEnum >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest::Proto2MapEnum >::const_iterator
          it = this->known_map_field().begin();
          it != this->known_map_field().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TestEnumMap_KnownMapFieldEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(known_map_field_.NewEnumEntryWrapper(
            items[i].second->first, items[i].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       101, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
      }
    } else {
      ::google::protobuf::scoped_ptr<TestEnumMap_KnownMapFieldEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest::Proto2MapEnum >::const_iterator
          it = this->known_map_field().begin();
          it != this->known_map_field().end(); ++it) {
        entry.reset(known_map_field_.NewEnumEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       101, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
      }
    }
  }

  // map<int32, .protobuf_unittest.Proto2MapEnum> unknown_map_field = 102;
  if (!this->unknown_map_field().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest::Proto2MapEnum >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->unknown_map_field().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->unknown_map_field().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest::Proto2MapEnum >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest::Proto2MapEnum >::const_iterator
          it = this->unknown_map_field().begin();
          it != this->unknown_map_field().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TestEnumMap_UnknownMapFieldEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(unknown_map_field_.NewEnumEntryWrapper(
            items[i].second->first, items[i].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       102, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
      }
    } else {
      ::google::protobuf::scoped_ptr<TestEnumMap_UnknownMapFieldEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest::Proto2MapEnum >::const_iterator
          it = this->unknown_map_field().begin();
          it != this->unknown_map_field().end(); ++it) {
        entry.reset(unknown_map_field_.NewEnumEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       102, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestEnumMap)
  return target;
}

size_t TestEnumMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestEnumMap)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // map<int32, .protobuf_unittest.Proto2MapEnum> known_map_field = 101;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->known_map_field_size());
  {
    ::google::protobuf::scoped_ptr<TestEnumMap_KnownMapFieldEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest::Proto2MapEnum >::const_iterator
        it = this->known_map_field().begin();
        it != this->known_map_field().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(known_map_field_.NewEnumEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  // map<int32, .protobuf_unittest.Proto2MapEnum> unknown_map_field = 102;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->unknown_map_field_size());
  {
    ::google::protobuf::scoped_ptr<TestEnumMap_UnknownMapFieldEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest::Proto2MapEnum >::const_iterator
        it = this->unknown_map_field().begin();
        it != this->unknown_map_field().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(unknown_map_field_.NewEnumEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestEnumMap::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestEnumMap)
  GOOGLE_DCHECK_NE(&from, this);
  const TestEnumMap* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TestEnumMap>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestEnumMap)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestEnumMap)
    MergeFrom(*source);
  }
}

void TestEnumMap::MergeFrom(const TestEnumMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestEnumMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  known_map_field_.MergeFrom(from.known_map_field_);
  unknown_map_field_.MergeFrom(from.unknown_map_field_);
}

void TestEnumMap::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestEnumMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestEnumMap::CopyFrom(const TestEnumMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestEnumMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestEnumMap::IsInitialized() const {
  return true;
}

void TestEnumMap::Swap(TestEnumMap* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TestEnumMap* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void TestEnumMap::UnsafeArenaSwap(TestEnumMap* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TestEnumMap::InternalSwap(TestEnumMap* other) {
  known_map_field_.Swap(&other->known_map_field_);
  unknown_map_field_.Swap(&other->unknown_map_field_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TestEnumMap::GetMetadata() const {
  protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TestEnumMap

// map<int32, .protobuf_unittest.Proto2MapEnum> known_map_field = 101;
int TestEnumMap::known_map_field_size() const {
  return known_map_field_.size();
}
void TestEnumMap::clear_known_map_field() {
  known_map_field_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest::Proto2MapEnum >&
TestEnumMap::known_map_field() const {
  // @@protoc_insertion_point(field_map:protobuf_unittest.TestEnumMap.known_map_field)
  return known_map_field_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest::Proto2MapEnum >*
TestEnumMap::mutable_known_map_field() {
  // @@protoc_insertion_point(field_mutable_map:protobuf_unittest.TestEnumMap.known_map_field)
  return known_map_field_.MutableMap();
}

// map<int32, .protobuf_unittest.Proto2MapEnum> unknown_map_field = 102;
int TestEnumMap::unknown_map_field_size() const {
  return unknown_map_field_.size();
}
void TestEnumMap::clear_unknown_map_field() {
  unknown_map_field_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest::Proto2MapEnum >&
TestEnumMap::unknown_map_field() const {
  // @@protoc_insertion_point(field_map:protobuf_unittest.TestEnumMap.unknown_map_field)
  return unknown_map_field_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest::Proto2MapEnum >*
TestEnumMap::mutable_unknown_map_field() {
  // @@protoc_insertion_point(field_mutable_map:protobuf_unittest.TestEnumMap.unknown_map_field)
  return unknown_map_field_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestEnumMapPlusExtra::kKnownMapFieldFieldNumber;
const int TestEnumMapPlusExtra::kUnknownMapFieldFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TestEnumMapPlusExtra::TestEnumMapPlusExtra()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestEnumMapPlusExtra)
}
TestEnumMapPlusExtra::TestEnumMapPlusExtra(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  known_map_field_(arena),
  unknown_map_field_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestEnumMapPlusExtra)
}
TestEnumMapPlusExtra::TestEnumMapPlusExtra(const TestEnumMapPlusExtra& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  const ::google::protobuf::Descriptor*& TestEnumMapPlusExtra_KnownMapFieldEntry_descriptor = protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::file_level_metadata[3].descriptor;
  const ::google::protobuf::Descriptor*& TestEnumMapPlusExtra_UnknownMapFieldEntry_descriptor = protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::file_level_metadata[4].descriptor;
  known_map_field_.SetAssignDescriptorCallback(
      protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::protobuf_AssignDescriptorsOnce);
  known_map_field_.SetEntryDescriptor(
      &TestEnumMapPlusExtra_KnownMapFieldEntry_descriptor);
  known_map_field_.MergeFrom(from.known_map_field_);
  unknown_map_field_.SetAssignDescriptorCallback(
      protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::protobuf_AssignDescriptorsOnce);
  unknown_map_field_.SetEntryDescriptor(
      &TestEnumMapPlusExtra_UnknownMapFieldEntry_descriptor);
  unknown_map_field_.MergeFrom(from.unknown_map_field_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestEnumMapPlusExtra)
}

void TestEnumMapPlusExtra::SharedCtor() {
  _cached_size_ = 0;
  const ::google::protobuf::Descriptor*& TestEnumMapPlusExtra_KnownMapFieldEntry_descriptor = protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::file_level_metadata[3].descriptor;
  const ::google::protobuf::Descriptor*& TestEnumMapPlusExtra_UnknownMapFieldEntry_descriptor = protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::file_level_metadata[4].descriptor;
  known_map_field_.SetAssignDescriptorCallback(
      protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::protobuf_AssignDescriptorsOnce);
  known_map_field_.SetEntryDescriptor(
      &TestEnumMapPlusExtra_KnownMapFieldEntry_descriptor);
  unknown_map_field_.SetAssignDescriptorCallback(
      protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::protobuf_AssignDescriptorsOnce);
  unknown_map_field_.SetEntryDescriptor(
      &TestEnumMapPlusExtra_UnknownMapFieldEntry_descriptor);
}

TestEnumMapPlusExtra::~TestEnumMapPlusExtra() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestEnumMapPlusExtra)
  SharedDtor();
}

void TestEnumMapPlusExtra::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void TestEnumMapPlusExtra::ArenaDtor(void* object) {
  TestEnumMapPlusExtra* _this = reinterpret_cast< TestEnumMapPlusExtra* >(object);
  (void)_this;
}
void TestEnumMapPlusExtra::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void TestEnumMapPlusExtra::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestEnumMapPlusExtra::descriptor() {
  protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::file_level_metadata[5].descriptor;
}

const TestEnumMapPlusExtra& TestEnumMapPlusExtra::default_instance() {
  protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::InitDefaults();
  return *internal_default_instance();
}

TestEnumMapPlusExtra* TestEnumMapPlusExtra::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<TestEnumMapPlusExtra>(arena);
}

void TestEnumMapPlusExtra::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestEnumMapPlusExtra)
  known_map_field_.Clear();
  unknown_map_field_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TestEnumMapPlusExtra::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobuf_unittest.TestEnumMapPlusExtra)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<int32, .protobuf_unittest.Proto2MapEnumPlusExtra> known_map_field = 101;
      case 101: {
        if (tag == 810u) {
          DO_(input->IncrementRecursionDepth());
          ::google::protobuf::scoped_ptr<TestEnumMapPlusExtra_KnownMapFieldEntry> entry(known_map_field_.NewEntry());
          {
            ::std::string data;
            DO_(::google::protobuf::internal::WireFormatLite::ReadString(input, &data));
            DO_(entry->ParseFromString(data));
            if (::protobuf_unittest::Proto2MapEnumPlusExtra_IsValid(*entry->mutable_value())) {
              (*mutable_known_map_field())[entry->key()] =
                  static_cast< ::protobuf_unittest::Proto2MapEnumPlusExtra >(*entry->mutable_value());
            } else {
              mutable_unknown_fields()->AddLengthDelimited(101, data);
            }
          }
          if (entry->GetArena() != NULL) entry.release();
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<int32, .protobuf_unittest.Proto2MapEnumPlusExtra> unknown_map_field = 102;
      case 102: {
        if (tag == 818u) {
          DO_(input->IncrementRecursionDepth());
          ::google::protobuf::scoped_ptr<TestEnumMapPlusExtra_UnknownMapFieldEntry> entry(unknown_map_field_.NewEntry());
          {
            ::std::string data;
            DO_(::google::protobuf::internal::WireFormatLite::ReadString(input, &data));
            DO_(entry->ParseFromString(data));
            if (::protobuf_unittest::Proto2MapEnumPlusExtra_IsValid(*entry->mutable_value())) {
              (*mutable_unknown_map_field())[entry->key()] =
                  static_cast< ::protobuf_unittest::Proto2MapEnumPlusExtra >(*entry->mutable_value());
            } else {
              mutable_unknown_fields()->AddLengthDelimited(102, data);
            }
          }
          if (entry->GetArena() != NULL) entry.release();
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobuf_unittest.TestEnumMapPlusExtra)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobuf_unittest.TestEnumMapPlusExtra)
  return false;
#undef DO_
}

void TestEnumMapPlusExtra::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobuf_unittest.TestEnumMapPlusExtra)
  // map<int32, .protobuf_unittest.Proto2MapEnumPlusExtra> known_map_field = 101;
  if (!this->known_map_field().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest::Proto2MapEnumPlusExtra >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->known_map_field().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->known_map_field().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest::Proto2MapEnumPlusExtra >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest::Proto2MapEnumPlusExtra >::const_iterator
          it = this->known_map_field().begin();
          it != this->known_map_field().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TestEnumMapPlusExtra_KnownMapFieldEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(known_map_field_.NewEnumEntryWrapper(
            items[i].second->first, items[i].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            101, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
      }
    } else {
      ::google::protobuf::scoped_ptr<TestEnumMapPlusExtra_KnownMapFieldEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest::Proto2MapEnumPlusExtra >::const_iterator
          it = this->known_map_field().begin();
          it != this->known_map_field().end(); ++it) {
        entry.reset(known_map_field_.NewEnumEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            101, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
      }
    }
  }

  // map<int32, .protobuf_unittest.Proto2MapEnumPlusExtra> unknown_map_field = 102;
  if (!this->unknown_map_field().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest::Proto2MapEnumPlusExtra >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->unknown_map_field().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->unknown_map_field().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest::Proto2MapEnumPlusExtra >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest::Proto2MapEnumPlusExtra >::const_iterator
          it = this->unknown_map_field().begin();
          it != this->unknown_map_field().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TestEnumMapPlusExtra_UnknownMapFieldEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(unknown_map_field_.NewEnumEntryWrapper(
            items[i].second->first, items[i].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            102, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
      }
    } else {
      ::google::protobuf::scoped_ptr<TestEnumMapPlusExtra_UnknownMapFieldEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest::Proto2MapEnumPlusExtra >::const_iterator
          it = this->unknown_map_field().begin();
          it != this->unknown_map_field().end(); ++it) {
        entry.reset(unknown_map_field_.NewEnumEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            102, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protobuf_unittest.TestEnumMapPlusExtra)
}

::google::protobuf::uint8* TestEnumMapPlusExtra::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestEnumMapPlusExtra)
  // map<int32, .protobuf_unittest.Proto2MapEnumPlusExtra> known_map_field = 101;
  if (!this->known_map_field().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest::Proto2MapEnumPlusExtra >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->known_map_field().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->known_map_field().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest::Proto2MapEnumPlusExtra >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest::Proto2MapEnumPlusExtra >::const_iterator
          it = this->known_map_field().begin();
          it != this->known_map_field().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TestEnumMapPlusExtra_KnownMapFieldEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(known_map_field_.NewEnumEntryWrapper(
            items[i].second->first, items[i].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       101, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
      }
    } else {
      ::google::protobuf::scoped_ptr<TestEnumMapPlusExtra_KnownMapFieldEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest::Proto2MapEnumPlusExtra >::const_iterator
          it = this->known_map_field().begin();
          it != this->known_map_field().end(); ++it) {
        entry.reset(known_map_field_.NewEnumEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       101, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
      }
    }
  }

  // map<int32, .protobuf_unittest.Proto2MapEnumPlusExtra> unknown_map_field = 102;
  if (!this->unknown_map_field().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest::Proto2MapEnumPlusExtra >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->unknown_map_field().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->unknown_map_field().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest::Proto2MapEnumPlusExtra >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest::Proto2MapEnumPlusExtra >::const_iterator
          it = this->unknown_map_field().begin();
          it != this->unknown_map_field().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TestEnumMapPlusExtra_UnknownMapFieldEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(unknown_map_field_.NewEnumEntryWrapper(
            items[i].second->first, items[i].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       102, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
      }
    } else {
      ::google::protobuf::scoped_ptr<TestEnumMapPlusExtra_UnknownMapFieldEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest::Proto2MapEnumPlusExtra >::const_iterator
          it = this->unknown_map_field().begin();
          it != this->unknown_map_field().end(); ++it) {
        entry.reset(unknown_map_field_.NewEnumEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       102, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestEnumMapPlusExtra)
  return target;
}

size_t TestEnumMapPlusExtra::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestEnumMapPlusExtra)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // map<int32, .protobuf_unittest.Proto2MapEnumPlusExtra> known_map_field = 101;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->known_map_field_size());
  {
    ::google::protobuf::scoped_ptr<TestEnumMapPlusExtra_KnownMapFieldEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest::Proto2MapEnumPlusExtra >::const_iterator
        it = this->known_map_field().begin();
        it != this->known_map_field().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(known_map_field_.NewEnumEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  // map<int32, .protobuf_unittest.Proto2MapEnumPlusExtra> unknown_map_field = 102;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->unknown_map_field_size());
  {
    ::google::protobuf::scoped_ptr<TestEnumMapPlusExtra_UnknownMapFieldEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest::Proto2MapEnumPlusExtra >::const_iterator
        it = this->unknown_map_field().begin();
        it != this->unknown_map_field().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(unknown_map_field_.NewEnumEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestEnumMapPlusExtra::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestEnumMapPlusExtra)
  GOOGLE_DCHECK_NE(&from, this);
  const TestEnumMapPlusExtra* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TestEnumMapPlusExtra>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestEnumMapPlusExtra)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestEnumMapPlusExtra)
    MergeFrom(*source);
  }
}

void TestEnumMapPlusExtra::MergeFrom(const TestEnumMapPlusExtra& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestEnumMapPlusExtra)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  known_map_field_.MergeFrom(from.known_map_field_);
  unknown_map_field_.MergeFrom(from.unknown_map_field_);
}

void TestEnumMapPlusExtra::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestEnumMapPlusExtra)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestEnumMapPlusExtra::CopyFrom(const TestEnumMapPlusExtra& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestEnumMapPlusExtra)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestEnumMapPlusExtra::IsInitialized() const {
  return true;
}

void TestEnumMapPlusExtra::Swap(TestEnumMapPlusExtra* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TestEnumMapPlusExtra* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void TestEnumMapPlusExtra::UnsafeArenaSwap(TestEnumMapPlusExtra* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TestEnumMapPlusExtra::InternalSwap(TestEnumMapPlusExtra* other) {
  known_map_field_.Swap(&other->known_map_field_);
  unknown_map_field_.Swap(&other->unknown_map_field_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TestEnumMapPlusExtra::GetMetadata() const {
  protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TestEnumMapPlusExtra

// map<int32, .protobuf_unittest.Proto2MapEnumPlusExtra> known_map_field = 101;
int TestEnumMapPlusExtra::known_map_field_size() const {
  return known_map_field_.size();
}
void TestEnumMapPlusExtra::clear_known_map_field() {
  known_map_field_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest::Proto2MapEnumPlusExtra >&
TestEnumMapPlusExtra::known_map_field() const {
  // @@protoc_insertion_point(field_map:protobuf_unittest.TestEnumMapPlusExtra.known_map_field)
  return known_map_field_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest::Proto2MapEnumPlusExtra >*
TestEnumMapPlusExtra::mutable_known_map_field() {
  // @@protoc_insertion_point(field_mutable_map:protobuf_unittest.TestEnumMapPlusExtra.known_map_field)
  return known_map_field_.MutableMap();
}

// map<int32, .protobuf_unittest.Proto2MapEnumPlusExtra> unknown_map_field = 102;
int TestEnumMapPlusExtra::unknown_map_field_size() const {
  return unknown_map_field_.size();
}
void TestEnumMapPlusExtra::clear_unknown_map_field() {
  unknown_map_field_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest::Proto2MapEnumPlusExtra >&
TestEnumMapPlusExtra::unknown_map_field() const {
  // @@protoc_insertion_point(field_map:protobuf_unittest.TestEnumMapPlusExtra.unknown_map_field)
  return unknown_map_field_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest::Proto2MapEnumPlusExtra >*
TestEnumMapPlusExtra::mutable_unknown_map_field() {
  // @@protoc_insertion_point(field_mutable_map:protobuf_unittest.TestEnumMapPlusExtra.unknown_map_field)
  return unknown_map_field_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestImportEnumMap::kImportEnumAmpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TestImportEnumMap::TestImportEnumMap()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestImportEnumMap)
}
TestImportEnumMap::TestImportEnumMap(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  import_enum_amp_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestImportEnumMap)
}
TestImportEnumMap::TestImportEnumMap(const TestImportEnumMap& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  const ::google::protobuf::Descriptor*& TestImportEnumMap_ImportEnumAmpEntry_descriptor = protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::file_level_metadata[6].descriptor;
  import_enum_amp_.SetAssignDescriptorCallback(
      protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::protobuf_AssignDescriptorsOnce);
  import_enum_amp_.SetEntryDescriptor(
      &TestImportEnumMap_ImportEnumAmpEntry_descriptor);
  import_enum_amp_.MergeFrom(from.import_enum_amp_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestImportEnumMap)
}

void TestImportEnumMap::SharedCtor() {
  _cached_size_ = 0;
  const ::google::protobuf::Descriptor*& TestImportEnumMap_ImportEnumAmpEntry_descriptor = protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::file_level_metadata[6].descriptor;
  import_enum_amp_.SetAssignDescriptorCallback(
      protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::protobuf_AssignDescriptorsOnce);
  import_enum_amp_.SetEntryDescriptor(
      &TestImportEnumMap_ImportEnumAmpEntry_descriptor);
}

TestImportEnumMap::~TestImportEnumMap() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestImportEnumMap)
  SharedDtor();
}

void TestImportEnumMap::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void TestImportEnumMap::ArenaDtor(void* object) {
  TestImportEnumMap* _this = reinterpret_cast< TestImportEnumMap* >(object);
  (void)_this;
}
void TestImportEnumMap::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void TestImportEnumMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestImportEnumMap::descriptor() {
  protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::file_level_metadata[7].descriptor;
}

const TestImportEnumMap& TestImportEnumMap::default_instance() {
  protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::InitDefaults();
  return *internal_default_instance();
}

TestImportEnumMap* TestImportEnumMap::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<TestImportEnumMap>(arena);
}

void TestImportEnumMap::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestImportEnumMap)
  import_enum_amp_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TestImportEnumMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobuf_unittest.TestImportEnumMap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<int32, .protobuf_unittest_import.ImportEnumForMap> import_enum_amp = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          ::google::protobuf::scoped_ptr<TestImportEnumMap_ImportEnumAmpEntry> entry(import_enum_amp_.NewEntry());
          {
            ::std::string data;
            DO_(::google::protobuf::internal::WireFormatLite::ReadString(input, &data));
            DO_(entry->ParseFromString(data));
            if (::protobuf_unittest_import::ImportEnumForMap_IsValid(*entry->mutable_value())) {
              (*mutable_import_enum_amp())[entry->key()] =
                  static_cast< ::protobuf_unittest_import::ImportEnumForMap >(*entry->mutable_value());
            } else {
              mutable_unknown_fields()->AddLengthDelimited(1, data);
            }
          }
          if (entry->GetArena() != NULL) entry.release();
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobuf_unittest.TestImportEnumMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobuf_unittest.TestImportEnumMap)
  return false;
#undef DO_
}

void TestImportEnumMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobuf_unittest.TestImportEnumMap)
  // map<int32, .protobuf_unittest_import.ImportEnumForMap> import_enum_amp = 1;
  if (!this->import_enum_amp().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest_import::ImportEnumForMap >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->import_enum_amp().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->import_enum_amp().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest_import::ImportEnumForMap >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest_import::ImportEnumForMap >::const_iterator
          it = this->import_enum_amp().begin();
          it != this->import_enum_amp().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TestImportEnumMap_ImportEnumAmpEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(import_enum_amp_.NewEnumEntryWrapper(
            items[i].second->first, items[i].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
      }
    } else {
      ::google::protobuf::scoped_ptr<TestImportEnumMap_ImportEnumAmpEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest_import::ImportEnumForMap >::const_iterator
          it = this->import_enum_amp().begin();
          it != this->import_enum_amp().end(); ++it) {
        entry.reset(import_enum_amp_.NewEnumEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protobuf_unittest.TestImportEnumMap)
}

::google::protobuf::uint8* TestImportEnumMap::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestImportEnumMap)
  // map<int32, .protobuf_unittest_import.ImportEnumForMap> import_enum_amp = 1;
  if (!this->import_enum_amp().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest_import::ImportEnumForMap >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->import_enum_amp().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->import_enum_amp().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest_import::ImportEnumForMap >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest_import::ImportEnumForMap >::const_iterator
          it = this->import_enum_amp().begin();
          it != this->import_enum_amp().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TestImportEnumMap_ImportEnumAmpEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(import_enum_amp_.NewEnumEntryWrapper(
            items[i].second->first, items[i].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
      }
    } else {
      ::google::protobuf::scoped_ptr<TestImportEnumMap_ImportEnumAmpEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest_import::ImportEnumForMap >::const_iterator
          it = this->import_enum_amp().begin();
          it != this->import_enum_amp().end(); ++it) {
        entry.reset(import_enum_amp_.NewEnumEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestImportEnumMap)
  return target;
}

size_t TestImportEnumMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestImportEnumMap)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // map<int32, .protobuf_unittest_import.ImportEnumForMap> import_enum_amp = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->import_enum_amp_size());
  {
    ::google::protobuf::scoped_ptr<TestImportEnumMap_ImportEnumAmpEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest_import::ImportEnumForMap >::const_iterator
        it = this->import_enum_amp().begin();
        it != this->import_enum_amp().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(import_enum_amp_.NewEnumEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestImportEnumMap::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestImportEnumMap)
  GOOGLE_DCHECK_NE(&from, this);
  const TestImportEnumMap* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TestImportEnumMap>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestImportEnumMap)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestImportEnumMap)
    MergeFrom(*source);
  }
}

void TestImportEnumMap::MergeFrom(const TestImportEnumMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestImportEnumMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  import_enum_amp_.MergeFrom(from.import_enum_amp_);
}

void TestImportEnumMap::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestImportEnumMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestImportEnumMap::CopyFrom(const TestImportEnumMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestImportEnumMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestImportEnumMap::IsInitialized() const {
  return true;
}

void TestImportEnumMap::Swap(TestImportEnumMap* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TestImportEnumMap* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void TestImportEnumMap::UnsafeArenaSwap(TestImportEnumMap* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TestImportEnumMap::InternalSwap(TestImportEnumMap* other) {
  import_enum_amp_.Swap(&other->import_enum_amp_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TestImportEnumMap::GetMetadata() const {
  protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::file_level_metadata[7];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TestImportEnumMap

// map<int32, .protobuf_unittest_import.ImportEnumForMap> import_enum_amp = 1;
int TestImportEnumMap::import_enum_amp_size() const {
  return import_enum_amp_.size();
}
void TestImportEnumMap::clear_import_enum_amp() {
  import_enum_amp_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest_import::ImportEnumForMap >&
TestImportEnumMap::import_enum_amp() const {
  // @@protoc_insertion_point(field_map:protobuf_unittest.TestImportEnumMap.import_enum_amp)
  return import_enum_amp_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest_import::ImportEnumForMap >*
TestImportEnumMap::mutable_import_enum_amp() {
  // @@protoc_insertion_point(field_mutable_map:protobuf_unittest.TestImportEnumMap.import_enum_amp)
  return import_enum_amp_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestIntIntMap::kMFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TestIntIntMap::TestIntIntMap()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestIntIntMap)
}
TestIntIntMap::TestIntIntMap(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  m_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestIntIntMap)
}
TestIntIntMap::TestIntIntMap(const TestIntIntMap& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  const ::google::protobuf::Descriptor*& TestIntIntMap_MEntry_descriptor = protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::file_level_metadata[8].descriptor;
  m_.SetAssignDescriptorCallback(
      protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::protobuf_AssignDescriptorsOnce);
  m_.SetEntryDescriptor(
      &TestIntIntMap_MEntry_descriptor);
  m_.MergeFrom(from.m_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestIntIntMap)
}

void TestIntIntMap::SharedCtor() {
  _cached_size_ = 0;
  const ::google::protobuf::Descriptor*& TestIntIntMap_MEntry_descriptor = protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::file_level_metadata[8].descriptor;
  m_.SetAssignDescriptorCallback(
      protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::protobuf_AssignDescriptorsOnce);
  m_.SetEntryDescriptor(
      &TestIntIntMap_MEntry_descriptor);
}

TestIntIntMap::~TestIntIntMap() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestIntIntMap)
  SharedDtor();
}

void TestIntIntMap::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void TestIntIntMap::ArenaDtor(void* object) {
  TestIntIntMap* _this = reinterpret_cast< TestIntIntMap* >(object);
  (void)_this;
}
void TestIntIntMap::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void TestIntIntMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestIntIntMap::descriptor() {
  protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::file_level_metadata[9].descriptor;
}

const TestIntIntMap& TestIntIntMap::default_instance() {
  protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::InitDefaults();
  return *internal_default_instance();
}

TestIntIntMap* TestIntIntMap::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<TestIntIntMap>(arena);
}

void TestIntIntMap::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestIntIntMap)
  m_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TestIntIntMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobuf_unittest.TestIntIntMap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<int32, int32> m = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          TestIntIntMap_MEntry::Parser< ::google::protobuf::internal::MapField<
              ::google::protobuf::int32, ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 > > parser(&m_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobuf_unittest.TestIntIntMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobuf_unittest.TestIntIntMap)
  return false;
#undef DO_
}

void TestIntIntMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobuf_unittest.TestIntIntMap)
  // map<int32, int32> m = 1;
  if (!this->m().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->m().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->m().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_iterator
          it = this->m().begin();
          it != this->m().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TestIntIntMap_MEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(m_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
      }
    } else {
      ::google::protobuf::scoped_ptr<TestIntIntMap_MEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_iterator
          it = this->m().begin();
          it != this->m().end(); ++it) {
        entry.reset(m_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protobuf_unittest.TestIntIntMap)
}

::google::protobuf::uint8* TestIntIntMap::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestIntIntMap)
  // map<int32, int32> m = 1;
  if (!this->m().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->m().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->m().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_iterator
          it = this->m().begin();
          it != this->m().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TestIntIntMap_MEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(m_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
      }
    } else {
      ::google::protobuf::scoped_ptr<TestIntIntMap_MEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_iterator
          it = this->m().begin();
          it != this->m().end(); ++it) {
        entry.reset(m_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestIntIntMap)
  return target;
}

size_t TestIntIntMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestIntIntMap)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // map<int32, int32> m = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->m_size());
  {
    ::google::protobuf::scoped_ptr<TestIntIntMap_MEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_iterator
        it = this->m().begin();
        it != this->m().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(m_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestIntIntMap::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestIntIntMap)
  GOOGLE_DCHECK_NE(&from, this);
  const TestIntIntMap* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TestIntIntMap>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestIntIntMap)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestIntIntMap)
    MergeFrom(*source);
  }
}

void TestIntIntMap::MergeFrom(const TestIntIntMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestIntIntMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  m_.MergeFrom(from.m_);
}

void TestIntIntMap::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestIntIntMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestIntIntMap::CopyFrom(const TestIntIntMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestIntIntMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestIntIntMap::IsInitialized() const {
  return true;
}

void TestIntIntMap::Swap(TestIntIntMap* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TestIntIntMap* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void TestIntIntMap::UnsafeArenaSwap(TestIntIntMap* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TestIntIntMap::InternalSwap(TestIntIntMap* other) {
  m_.Swap(&other->m_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TestIntIntMap::GetMetadata() const {
  protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::file_level_metadata[9];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TestIntIntMap

// map<int32, int32> m = 1;
int TestIntIntMap::m_size() const {
  return m_.size();
}
void TestIntIntMap::clear_m() {
  m_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >&
TestIntIntMap::m() const {
  // @@protoc_insertion_point(field_map:protobuf_unittest.TestIntIntMap.m)
  return m_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >*
TestIntIntMap::mutable_m() {
  // @@protoc_insertion_point(field_mutable_map:protobuf_unittest.TestIntIntMap.m)
  return m_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestMaps::kMInt32FieldNumber;
const int TestMaps::kMInt64FieldNumber;
const int TestMaps::kMUint32FieldNumber;
const int TestMaps::kMUint64FieldNumber;
const int TestMaps::kMSint32FieldNumber;
const int TestMaps::kMSint64FieldNumber;
const int TestMaps::kMFixed32FieldNumber;
const int TestMaps::kMFixed64FieldNumber;
const int TestMaps::kMSfixed32FieldNumber;
const int TestMaps::kMSfixed64FieldNumber;
const int TestMaps::kMBoolFieldNumber;
const int TestMaps::kMStringFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TestMaps::TestMaps()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestMaps)
}
TestMaps::TestMaps(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  m_int32_(arena),
  m_int64_(arena),
  m_uint32_(arena),
  m_uint64_(arena),
  m_sint32_(arena),
  m_sint64_(arena),
  m_fixed32_(arena),
  m_fixed64_(arena),
  m_sfixed32_(arena),
  m_sfixed64_(arena),
  m_bool_(arena),
  m_string_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestMaps)
}
TestMaps::TestMaps(const TestMaps& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  const ::google::protobuf::Descriptor*& TestMaps_MInt32Entry_descriptor = protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::file_level_metadata[10].descriptor;
  const ::google::protobuf::Descriptor*& TestMaps_MInt64Entry_descriptor = protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::file_level_metadata[11].descriptor;
  const ::google::protobuf::Descriptor*& TestMaps_MUint32Entry_descriptor = protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::file_level_metadata[12].descriptor;
  const ::google::protobuf::Descriptor*& TestMaps_MUint64Entry_descriptor = protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::file_level_metadata[13].descriptor;
  const ::google::protobuf::Descriptor*& TestMaps_MSint32Entry_descriptor = protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::file_level_metadata[14].descriptor;
  const ::google::protobuf::Descriptor*& TestMaps_MSint64Entry_descriptor = protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::file_level_metadata[15].descriptor;
  const ::google::protobuf::Descriptor*& TestMaps_MFixed32Entry_descriptor = protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::file_level_metadata[16].descriptor;
  const ::google::protobuf::Descriptor*& TestMaps_MFixed64Entry_descriptor = protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::file_level_metadata[17].descriptor;
  const ::google::protobuf::Descriptor*& TestMaps_MSfixed32Entry_descriptor = protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::file_level_metadata[18].descriptor;
  const ::google::protobuf::Descriptor*& TestMaps_MSfixed64Entry_descriptor = protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::file_level_metadata[19].descriptor;
  const ::google::protobuf::Descriptor*& TestMaps_MBoolEntry_descriptor = protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::file_level_metadata[20].descriptor;
  const ::google::protobuf::Descriptor*& TestMaps_MStringEntry_descriptor = protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::file_level_metadata[21].descriptor;
  m_int32_.SetAssignDescriptorCallback(
      protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::protobuf_AssignDescriptorsOnce);
  m_int32_.SetEntryDescriptor(
      &TestMaps_MInt32Entry_descriptor);
  m_int32_.MergeFrom(from.m_int32_);
  m_int64_.SetAssignDescriptorCallback(
      protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::protobuf_AssignDescriptorsOnce);
  m_int64_.SetEntryDescriptor(
      &TestMaps_MInt64Entry_descriptor);
  m_int64_.MergeFrom(from.m_int64_);
  m_uint32_.SetAssignDescriptorCallback(
      protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::protobuf_AssignDescriptorsOnce);
  m_uint32_.SetEntryDescriptor(
      &TestMaps_MUint32Entry_descriptor);
  m_uint32_.MergeFrom(from.m_uint32_);
  m_uint64_.SetAssignDescriptorCallback(
      protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::protobuf_AssignDescriptorsOnce);
  m_uint64_.SetEntryDescriptor(
      &TestMaps_MUint64Entry_descriptor);
  m_uint64_.MergeFrom(from.m_uint64_);
  m_sint32_.SetAssignDescriptorCallback(
      protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::protobuf_AssignDescriptorsOnce);
  m_sint32_.SetEntryDescriptor(
      &TestMaps_MSint32Entry_descriptor);
  m_sint32_.MergeFrom(from.m_sint32_);
  m_sint64_.SetAssignDescriptorCallback(
      protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::protobuf_AssignDescriptorsOnce);
  m_sint64_.SetEntryDescriptor(
      &TestMaps_MSint64Entry_descriptor);
  m_sint64_.MergeFrom(from.m_sint64_);
  m_fixed32_.SetAssignDescriptorCallback(
      protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::protobuf_AssignDescriptorsOnce);
  m_fixed32_.SetEntryDescriptor(
      &TestMaps_MFixed32Entry_descriptor);
  m_fixed32_.MergeFrom(from.m_fixed32_);
  m_fixed64_.SetAssignDescriptorCallback(
      protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::protobuf_AssignDescriptorsOnce);
  m_fixed64_.SetEntryDescriptor(
      &TestMaps_MFixed64Entry_descriptor);
  m_fixed64_.MergeFrom(from.m_fixed64_);
  m_sfixed32_.SetAssignDescriptorCallback(
      protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::protobuf_AssignDescriptorsOnce);
  m_sfixed32_.SetEntryDescriptor(
      &TestMaps_MSfixed32Entry_descriptor);
  m_sfixed32_.MergeFrom(from.m_sfixed32_);
  m_sfixed64_.SetAssignDescriptorCallback(
      protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::protobuf_AssignDescriptorsOnce);
  m_sfixed64_.SetEntryDescriptor(
      &TestMaps_MSfixed64Entry_descriptor);
  m_sfixed64_.MergeFrom(from.m_sfixed64_);
  m_bool_.SetAssignDescriptorCallback(
      protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::protobuf_AssignDescriptorsOnce);
  m_bool_.SetEntryDescriptor(
      &TestMaps_MBoolEntry_descriptor);
  m_bool_.MergeFrom(from.m_bool_);
  m_string_.SetAssignDescriptorCallback(
      protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::protobuf_AssignDescriptorsOnce);
  m_string_.SetEntryDescriptor(
      &TestMaps_MStringEntry_descriptor);
  m_string_.MergeFrom(from.m_string_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestMaps)
}

void TestMaps::SharedCtor() {
  _cached_size_ = 0;
  const ::google::protobuf::Descriptor*& TestMaps_MInt32Entry_descriptor = protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::file_level_metadata[10].descriptor;
  const ::google::protobuf::Descriptor*& TestMaps_MInt64Entry_descriptor = protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::file_level_metadata[11].descriptor;
  const ::google::protobuf::Descriptor*& TestMaps_MUint32Entry_descriptor = protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::file_level_metadata[12].descriptor;
  const ::google::protobuf::Descriptor*& TestMaps_MUint64Entry_descriptor = protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::file_level_metadata[13].descriptor;
  const ::google::protobuf::Descriptor*& TestMaps_MSint32Entry_descriptor = protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::file_level_metadata[14].descriptor;
  const ::google::protobuf::Descriptor*& TestMaps_MSint64Entry_descriptor = protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::file_level_metadata[15].descriptor;
  const ::google::protobuf::Descriptor*& TestMaps_MFixed32Entry_descriptor = protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::file_level_metadata[16].descriptor;
  const ::google::protobuf::Descriptor*& TestMaps_MFixed64Entry_descriptor = protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::file_level_metadata[17].descriptor;
  const ::google::protobuf::Descriptor*& TestMaps_MSfixed32Entry_descriptor = protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::file_level_metadata[18].descriptor;
  const ::google::protobuf::Descriptor*& TestMaps_MSfixed64Entry_descriptor = protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::file_level_metadata[19].descriptor;
  const ::google::protobuf::Descriptor*& TestMaps_MBoolEntry_descriptor = protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::file_level_metadata[20].descriptor;
  const ::google::protobuf::Descriptor*& TestMaps_MStringEntry_descriptor = protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::file_level_metadata[21].descriptor;
  m_int32_.SetAssignDescriptorCallback(
      protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::protobuf_AssignDescriptorsOnce);
  m_int32_.SetEntryDescriptor(
      &TestMaps_MInt32Entry_descriptor);
  m_int64_.SetAssignDescriptorCallback(
      protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::protobuf_AssignDescriptorsOnce);
  m_int64_.SetEntryDescriptor(
      &TestMaps_MInt64Entry_descriptor);
  m_uint32_.SetAssignDescriptorCallback(
      protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::protobuf_AssignDescriptorsOnce);
  m_uint32_.SetEntryDescriptor(
      &TestMaps_MUint32Entry_descriptor);
  m_uint64_.SetAssignDescriptorCallback(
      protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::protobuf_AssignDescriptorsOnce);
  m_uint64_.SetEntryDescriptor(
      &TestMaps_MUint64Entry_descriptor);
  m_sint32_.SetAssignDescriptorCallback(
      protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::protobuf_AssignDescriptorsOnce);
  m_sint32_.SetEntryDescriptor(
      &TestMaps_MSint32Entry_descriptor);
  m_sint64_.SetAssignDescriptorCallback(
      protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::protobuf_AssignDescriptorsOnce);
  m_sint64_.SetEntryDescriptor(
      &TestMaps_MSint64Entry_descriptor);
  m_fixed32_.SetAssignDescriptorCallback(
      protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::protobuf_AssignDescriptorsOnce);
  m_fixed32_.SetEntryDescriptor(
      &TestMaps_MFixed32Entry_descriptor);
  m_fixed64_.SetAssignDescriptorCallback(
      protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::protobuf_AssignDescriptorsOnce);
  m_fixed64_.SetEntryDescriptor(
      &TestMaps_MFixed64Entry_descriptor);
  m_sfixed32_.SetAssignDescriptorCallback(
      protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::protobuf_AssignDescriptorsOnce);
  m_sfixed32_.SetEntryDescriptor(
      &TestMaps_MSfixed32Entry_descriptor);
  m_sfixed64_.SetAssignDescriptorCallback(
      protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::protobuf_AssignDescriptorsOnce);
  m_sfixed64_.SetEntryDescriptor(
      &TestMaps_MSfixed64Entry_descriptor);
  m_bool_.SetAssignDescriptorCallback(
      protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::protobuf_AssignDescriptorsOnce);
  m_bool_.SetEntryDescriptor(
      &TestMaps_MBoolEntry_descriptor);
  m_string_.SetAssignDescriptorCallback(
      protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::protobuf_AssignDescriptorsOnce);
  m_string_.SetEntryDescriptor(
      &TestMaps_MStringEntry_descriptor);
}

TestMaps::~TestMaps() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestMaps)
  SharedDtor();
}

void TestMaps::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void TestMaps::ArenaDtor(void* object) {
  TestMaps* _this = reinterpret_cast< TestMaps* >(object);
  (void)_this;
}
void TestMaps::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void TestMaps::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestMaps::descriptor() {
  protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::file_level_metadata[22].descriptor;
}

const TestMaps& TestMaps::default_instance() {
  protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::InitDefaults();
  return *internal_default_instance();
}

TestMaps* TestMaps::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<TestMaps>(arena);
}

void TestMaps::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestMaps)
  m_int32_.Clear();
  m_int64_.Clear();
  m_uint32_.Clear();
  m_uint64_.Clear();
  m_sint32_.Clear();
  m_sint64_.Clear();
  m_fixed32_.Clear();
  m_fixed64_.Clear();
  m_sfixed32_.Clear();
  m_sfixed64_.Clear();
  m_bool_.Clear();
  m_string_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TestMaps::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobuf_unittest.TestMaps)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<int32, .protobuf_unittest.TestIntIntMap> m_int32 = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          TestMaps_MInt32Entry::Parser< ::google::protobuf::internal::MapField<
              ::google::protobuf::int32, ::protobuf_unittest::TestIntIntMap,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest::TestIntIntMap > > parser(&m_int32_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<int64, .protobuf_unittest.TestIntIntMap> m_int64 = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          TestMaps_MInt64Entry::Parser< ::google::protobuf::internal::MapField<
              ::google::protobuf::int64, ::protobuf_unittest::TestIntIntMap,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int64, ::protobuf_unittest::TestIntIntMap > > parser(&m_int64_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<uint32, .protobuf_unittest.TestIntIntMap> m_uint32 = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          TestMaps_MUint32Entry::Parser< ::google::protobuf::internal::MapField<
              ::google::protobuf::uint32, ::protobuf_unittest::TestIntIntMap,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::protobuf_unittest::TestIntIntMap > > parser(&m_uint32_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<uint64, .protobuf_unittest.TestIntIntMap> m_uint64 = 4;
      case 4: {
        if (tag == 34u) {
          DO_(input->IncrementRecursionDepth());
          TestMaps_MUint64Entry::Parser< ::google::protobuf::internal::MapField<
              ::google::protobuf::uint64, ::protobuf_unittest::TestIntIntMap,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT64,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint64, ::protobuf_unittest::TestIntIntMap > > parser(&m_uint64_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<sint32, .protobuf_unittest.TestIntIntMap> m_sint32 = 5;
      case 5: {
        if (tag == 42u) {
          DO_(input->IncrementRecursionDepth());
          TestMaps_MSint32Entry::Parser< ::google::protobuf::internal::MapField<
              ::google::protobuf::int32, ::protobuf_unittest::TestIntIntMap,
              ::google::protobuf::internal::WireFormatLite::TYPE_SINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest::TestIntIntMap > > parser(&m_sint32_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<sint64, .protobuf_unittest.TestIntIntMap> m_sint64 = 6;
      case 6: {
        if (tag == 50u) {
          DO_(input->IncrementRecursionDepth());
          TestMaps_MSint64Entry::Parser< ::google::protobuf::internal::MapField<
              ::google::protobuf::int64, ::protobuf_unittest::TestIntIntMap,
              ::google::protobuf::internal::WireFormatLite::TYPE_SINT64,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int64, ::protobuf_unittest::TestIntIntMap > > parser(&m_sint64_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<fixed32, .protobuf_unittest.TestIntIntMap> m_fixed32 = 7;
      case 7: {
        if (tag == 58u) {
          DO_(input->IncrementRecursionDepth());
          TestMaps_MFixed32Entry::Parser< ::google::protobuf::internal::MapField<
              ::google::protobuf::uint32, ::protobuf_unittest::TestIntIntMap,
              ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::protobuf_unittest::TestIntIntMap > > parser(&m_fixed32_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<fixed64, .protobuf_unittest.TestIntIntMap> m_fixed64 = 8;
      case 8: {
        if (tag == 66u) {
          DO_(input->IncrementRecursionDepth());
          TestMaps_MFixed64Entry::Parser< ::google::protobuf::internal::MapField<
              ::google::protobuf::uint64, ::protobuf_unittest::TestIntIntMap,
              ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint64, ::protobuf_unittest::TestIntIntMap > > parser(&m_fixed64_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<sfixed32, .protobuf_unittest.TestIntIntMap> m_sfixed32 = 9;
      case 9: {
        if (tag == 74u) {
          DO_(input->IncrementRecursionDepth());
          TestMaps_MSfixed32Entry::Parser< ::google::protobuf::internal::MapField<
              ::google::protobuf::int32, ::protobuf_unittest::TestIntIntMap,
              ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest::TestIntIntMap > > parser(&m_sfixed32_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<sfixed64, .protobuf_unittest.TestIntIntMap> m_sfixed64 = 10;
      case 10: {
        if (tag == 82u) {
          DO_(input->IncrementRecursionDepth());
          TestMaps_MSfixed64Entry::Parser< ::google::protobuf::internal::MapField<
              ::google::protobuf::int64, ::protobuf_unittest::TestIntIntMap,
              ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int64, ::protobuf_unittest::TestIntIntMap > > parser(&m_sfixed64_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<bool, .protobuf_unittest.TestIntIntMap> m_bool = 11;
      case 11: {
        if (tag == 90u) {
          DO_(input->IncrementRecursionDepth());
          TestMaps_MBoolEntry::Parser< ::google::protobuf::internal::MapField<
              bool, ::protobuf_unittest::TestIntIntMap,
              ::google::protobuf::internal::WireFormatLite::TYPE_BOOL,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< bool, ::protobuf_unittest::TestIntIntMap > > parser(&m_bool_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<string, .protobuf_unittest.TestIntIntMap> m_string = 12;
      case 12: {
        if (tag == 98u) {
          DO_(input->IncrementRecursionDepth());
          TestMaps_MStringEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::protobuf_unittest::TestIntIntMap,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::protobuf_unittest::TestIntIntMap > > parser(&m_string_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protobuf_unittest.TestMaps.MStringEntry.key");
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobuf_unittest.TestMaps)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobuf_unittest.TestMaps)
  return false;
#undef DO_
}

void TestMaps::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobuf_unittest.TestMaps)
  // map<int32, .protobuf_unittest.TestIntIntMap> m_int32 = 1;
  if (!this->m_int32().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest::TestIntIntMap >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->m_int32().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->m_int32().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest::TestIntIntMap >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_int32().begin();
          it != this->m_int32().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TestMaps_MInt32Entry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(m_int32_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
      }
    } else {
      ::google::protobuf::scoped_ptr<TestMaps_MInt32Entry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_int32().begin();
          it != this->m_int32().end(); ++it) {
        entry.reset(m_int32_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
      }
    }
  }

  // map<int64, .protobuf_unittest.TestIntIntMap> m_int64 = 2;
  if (!this->m_int64().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int64, ::protobuf_unittest::TestIntIntMap >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->m_int64().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->m_int64().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int64, ::protobuf_unittest::TestIntIntMap >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_int64().begin();
          it != this->m_int64().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TestMaps_MInt64Entry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(m_int64_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
      }
    } else {
      ::google::protobuf::scoped_ptr<TestMaps_MInt64Entry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_int64().begin();
          it != this->m_int64().end(); ++it) {
        entry.reset(m_int64_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
      }
    }
  }

  // map<uint32, .protobuf_unittest.TestIntIntMap> m_uint32 = 3;
  if (!this->m_uint32().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::protobuf_unittest::TestIntIntMap >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->m_uint32().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->m_uint32().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::protobuf_unittest::TestIntIntMap >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_uint32().begin();
          it != this->m_uint32().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TestMaps_MUint32Entry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(m_uint32_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
      }
    } else {
      ::google::protobuf::scoped_ptr<TestMaps_MUint32Entry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_uint32().begin();
          it != this->m_uint32().end(); ++it) {
        entry.reset(m_uint32_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
      }
    }
  }

  // map<uint64, .protobuf_unittest.TestIntIntMap> m_uint64 = 4;
  if (!this->m_uint64().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint64, ::protobuf_unittest::TestIntIntMap >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->m_uint64().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->m_uint64().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint64, ::protobuf_unittest::TestIntIntMap >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint64, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_uint64().begin();
          it != this->m_uint64().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TestMaps_MUint64Entry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(m_uint64_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
      }
    } else {
      ::google::protobuf::scoped_ptr<TestMaps_MUint64Entry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint64, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_uint64().begin();
          it != this->m_uint64().end(); ++it) {
        entry.reset(m_uint64_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
      }
    }
  }

  // map<sint32, .protobuf_unittest.TestIntIntMap> m_sint32 = 5;
  if (!this->m_sint32().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest::TestIntIntMap >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->m_sint32().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->m_sint32().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest::TestIntIntMap >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_sint32().begin();
          it != this->m_sint32().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TestMaps_MSint32Entry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(m_sint32_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
      }
    } else {
      ::google::protobuf::scoped_ptr<TestMaps_MSint32Entry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_sint32().begin();
          it != this->m_sint32().end(); ++it) {
        entry.reset(m_sint32_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
      }
    }
  }

  // map<sint64, .protobuf_unittest.TestIntIntMap> m_sint64 = 6;
  if (!this->m_sint64().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int64, ::protobuf_unittest::TestIntIntMap >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->m_sint64().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->m_sint64().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int64, ::protobuf_unittest::TestIntIntMap >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_sint64().begin();
          it != this->m_sint64().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TestMaps_MSint64Entry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(m_sint64_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            6, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
      }
    } else {
      ::google::protobuf::scoped_ptr<TestMaps_MSint64Entry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_sint64().begin();
          it != this->m_sint64().end(); ++it) {
        entry.reset(m_sint64_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            6, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
      }
    }
  }

  // map<fixed32, .protobuf_unittest.TestIntIntMap> m_fixed32 = 7;
  if (!this->m_fixed32().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::protobuf_unittest::TestIntIntMap >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->m_fixed32().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->m_fixed32().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::protobuf_unittest::TestIntIntMap >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_fixed32().begin();
          it != this->m_fixed32().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TestMaps_MFixed32Entry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(m_fixed32_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            7, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
      }
    } else {
      ::google::protobuf::scoped_ptr<TestMaps_MFixed32Entry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_fixed32().begin();
          it != this->m_fixed32().end(); ++it) {
        entry.reset(m_fixed32_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            7, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
      }
    }
  }

  // map<fixed64, .protobuf_unittest.TestIntIntMap> m_fixed64 = 8;
  if (!this->m_fixed64().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint64, ::protobuf_unittest::TestIntIntMap >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->m_fixed64().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->m_fixed64().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint64, ::protobuf_unittest::TestIntIntMap >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint64, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_fixed64().begin();
          it != this->m_fixed64().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TestMaps_MFixed64Entry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(m_fixed64_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            8, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
      }
    } else {
      ::google::protobuf::scoped_ptr<TestMaps_MFixed64Entry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint64, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_fixed64().begin();
          it != this->m_fixed64().end(); ++it) {
        entry.reset(m_fixed64_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            8, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
      }
    }
  }

  // map<sfixed32, .protobuf_unittest.TestIntIntMap> m_sfixed32 = 9;
  if (!this->m_sfixed32().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest::TestIntIntMap >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->m_sfixed32().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->m_sfixed32().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest::TestIntIntMap >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_sfixed32().begin();
          it != this->m_sfixed32().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TestMaps_MSfixed32Entry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(m_sfixed32_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            9, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
      }
    } else {
      ::google::protobuf::scoped_ptr<TestMaps_MSfixed32Entry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_sfixed32().begin();
          it != this->m_sfixed32().end(); ++it) {
        entry.reset(m_sfixed32_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            9, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
      }
    }
  }

  // map<sfixed64, .protobuf_unittest.TestIntIntMap> m_sfixed64 = 10;
  if (!this->m_sfixed64().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int64, ::protobuf_unittest::TestIntIntMap >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->m_sfixed64().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->m_sfixed64().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int64, ::protobuf_unittest::TestIntIntMap >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_sfixed64().begin();
          it != this->m_sfixed64().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TestMaps_MSfixed64Entry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(m_sfixed64_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            10, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
      }
    } else {
      ::google::protobuf::scoped_ptr<TestMaps_MSfixed64Entry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_sfixed64().begin();
          it != this->m_sfixed64().end(); ++it) {
        entry.reset(m_sfixed64_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            10, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
      }
    }
  }

  // map<bool, .protobuf_unittest.TestIntIntMap> m_bool = 11;
  if (!this->m_bool().empty()) {
    typedef ::google::protobuf::Map< bool, ::protobuf_unittest::TestIntIntMap >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< bool, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->m_bool().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->m_bool().size()]);
      typedef ::google::protobuf::Map< bool, ::protobuf_unittest::TestIntIntMap >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< bool, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_bool().begin();
          it != this->m_bool().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TestMaps_MBoolEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(m_bool_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            11, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
      }
    } else {
      ::google::protobuf::scoped_ptr<TestMaps_MBoolEntry> entry;
      for (::google::protobuf::Map< bool, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_bool().begin();
          it != this->m_bool().end(); ++it) {
        entry.reset(m_bool_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            11, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
      }
    }
  }

  // map<string, .protobuf_unittest.TestIntIntMap> m_string = 12;
  if (!this->m_string().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::protobuf_unittest::TestIntIntMap >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "protobuf_unittest.TestMaps.MStringEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->m_string().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->m_string().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::protobuf_unittest::TestIntIntMap >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_string().begin();
          it != this->m_string().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TestMaps_MStringEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(m_string_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            12, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<TestMaps_MStringEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_string().begin();
          it != this->m_string().end(); ++it) {
        entry.reset(m_string_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            12, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protobuf_unittest.TestMaps)
}

::google::protobuf::uint8* TestMaps::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestMaps)
  // map<int32, .protobuf_unittest.TestIntIntMap> m_int32 = 1;
  if (!this->m_int32().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest::TestIntIntMap >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->m_int32().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->m_int32().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest::TestIntIntMap >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_int32().begin();
          it != this->m_int32().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TestMaps_MInt32Entry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(m_int32_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
      }
    } else {
      ::google::protobuf::scoped_ptr<TestMaps_MInt32Entry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_int32().begin();
          it != this->m_int32().end(); ++it) {
        entry.reset(m_int32_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
      }
    }
  }

  // map<int64, .protobuf_unittest.TestIntIntMap> m_int64 = 2;
  if (!this->m_int64().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int64, ::protobuf_unittest::TestIntIntMap >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->m_int64().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->m_int64().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int64, ::protobuf_unittest::TestIntIntMap >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_int64().begin();
          it != this->m_int64().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TestMaps_MInt64Entry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(m_int64_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
      }
    } else {
      ::google::protobuf::scoped_ptr<TestMaps_MInt64Entry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_int64().begin();
          it != this->m_int64().end(); ++it) {
        entry.reset(m_int64_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
      }
    }
  }

  // map<uint32, .protobuf_unittest.TestIntIntMap> m_uint32 = 3;
  if (!this->m_uint32().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::protobuf_unittest::TestIntIntMap >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->m_uint32().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->m_uint32().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::protobuf_unittest::TestIntIntMap >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_uint32().begin();
          it != this->m_uint32().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TestMaps_MUint32Entry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(m_uint32_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
      }
    } else {
      ::google::protobuf::scoped_ptr<TestMaps_MUint32Entry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_uint32().begin();
          it != this->m_uint32().end(); ++it) {
        entry.reset(m_uint32_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
      }
    }
  }

  // map<uint64, .protobuf_unittest.TestIntIntMap> m_uint64 = 4;
  if (!this->m_uint64().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint64, ::protobuf_unittest::TestIntIntMap >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->m_uint64().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->m_uint64().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint64, ::protobuf_unittest::TestIntIntMap >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint64, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_uint64().begin();
          it != this->m_uint64().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TestMaps_MUint64Entry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(m_uint64_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
      }
    } else {
      ::google::protobuf::scoped_ptr<TestMaps_MUint64Entry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint64, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_uint64().begin();
          it != this->m_uint64().end(); ++it) {
        entry.reset(m_uint64_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
      }
    }
  }

  // map<sint32, .protobuf_unittest.TestIntIntMap> m_sint32 = 5;
  if (!this->m_sint32().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest::TestIntIntMap >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->m_sint32().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->m_sint32().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest::TestIntIntMap >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_sint32().begin();
          it != this->m_sint32().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TestMaps_MSint32Entry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(m_sint32_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
      }
    } else {
      ::google::protobuf::scoped_ptr<TestMaps_MSint32Entry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_sint32().begin();
          it != this->m_sint32().end(); ++it) {
        entry.reset(m_sint32_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
      }
    }
  }

  // map<sint64, .protobuf_unittest.TestIntIntMap> m_sint64 = 6;
  if (!this->m_sint64().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int64, ::protobuf_unittest::TestIntIntMap >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->m_sint64().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->m_sint64().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int64, ::protobuf_unittest::TestIntIntMap >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_sint64().begin();
          it != this->m_sint64().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TestMaps_MSint64Entry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(m_sint64_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       6, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
      }
    } else {
      ::google::protobuf::scoped_ptr<TestMaps_MSint64Entry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_sint64().begin();
          it != this->m_sint64().end(); ++it) {
        entry.reset(m_sint64_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       6, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
      }
    }
  }

  // map<fixed32, .protobuf_unittest.TestIntIntMap> m_fixed32 = 7;
  if (!this->m_fixed32().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::protobuf_unittest::TestIntIntMap >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->m_fixed32().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->m_fixed32().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::protobuf_unittest::TestIntIntMap >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_fixed32().begin();
          it != this->m_fixed32().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TestMaps_MFixed32Entry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(m_fixed32_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       7, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
      }
    } else {
      ::google::protobuf::scoped_ptr<TestMaps_MFixed32Entry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_fixed32().begin();
          it != this->m_fixed32().end(); ++it) {
        entry.reset(m_fixed32_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       7, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
      }
    }
  }

  // map<fixed64, .protobuf_unittest.TestIntIntMap> m_fixed64 = 8;
  if (!this->m_fixed64().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint64, ::protobuf_unittest::TestIntIntMap >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->m_fixed64().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->m_fixed64().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint64, ::protobuf_unittest::TestIntIntMap >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint64, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_fixed64().begin();
          it != this->m_fixed64().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TestMaps_MFixed64Entry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(m_fixed64_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       8, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
      }
    } else {
      ::google::protobuf::scoped_ptr<TestMaps_MFixed64Entry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint64, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_fixed64().begin();
          it != this->m_fixed64().end(); ++it) {
        entry.reset(m_fixed64_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       8, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
      }
    }
  }

  // map<sfixed32, .protobuf_unittest.TestIntIntMap> m_sfixed32 = 9;
  if (!this->m_sfixed32().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest::TestIntIntMap >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->m_sfixed32().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->m_sfixed32().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest::TestIntIntMap >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_sfixed32().begin();
          it != this->m_sfixed32().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TestMaps_MSfixed32Entry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(m_sfixed32_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       9, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
      }
    } else {
      ::google::protobuf::scoped_ptr<TestMaps_MSfixed32Entry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_sfixed32().begin();
          it != this->m_sfixed32().end(); ++it) {
        entry.reset(m_sfixed32_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       9, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
      }
    }
  }

  // map<sfixed64, .protobuf_unittest.TestIntIntMap> m_sfixed64 = 10;
  if (!this->m_sfixed64().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int64, ::protobuf_unittest::TestIntIntMap >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->m_sfixed64().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->m_sfixed64().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int64, ::protobuf_unittest::TestIntIntMap >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_sfixed64().begin();
          it != this->m_sfixed64().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TestMaps_MSfixed64Entry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(m_sfixed64_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       10, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
      }
    } else {
      ::google::protobuf::scoped_ptr<TestMaps_MSfixed64Entry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_sfixed64().begin();
          it != this->m_sfixed64().end(); ++it) {
        entry.reset(m_sfixed64_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       10, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
      }
    }
  }

  // map<bool, .protobuf_unittest.TestIntIntMap> m_bool = 11;
  if (!this->m_bool().empty()) {
    typedef ::google::protobuf::Map< bool, ::protobuf_unittest::TestIntIntMap >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< bool, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->m_bool().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->m_bool().size()]);
      typedef ::google::protobuf::Map< bool, ::protobuf_unittest::TestIntIntMap >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< bool, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_bool().begin();
          it != this->m_bool().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TestMaps_MBoolEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(m_bool_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       11, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
      }
    } else {
      ::google::protobuf::scoped_ptr<TestMaps_MBoolEntry> entry;
      for (::google::protobuf::Map< bool, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_bool().begin();
          it != this->m_bool().end(); ++it) {
        entry.reset(m_bool_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       11, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
      }
    }
  }

  // map<string, .protobuf_unittest.TestIntIntMap> m_string = 12;
  if (!this->m_string().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::protobuf_unittest::TestIntIntMap >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "protobuf_unittest.TestMaps.MStringEntry.key");
      }
    };

    if (deterministic &&
        this->m_string().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->m_string().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::protobuf_unittest::TestIntIntMap >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_string().begin();
          it != this->m_string().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TestMaps_MStringEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(m_string_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       12, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<TestMaps_MStringEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_string().begin();
          it != this->m_string().end(); ++it) {
        entry.reset(m_string_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       12, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestMaps)
  return target;
}

size_t TestMaps::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestMaps)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // map<int32, .protobuf_unittest.TestIntIntMap> m_int32 = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->m_int32_size());
  {
    ::google::protobuf::scoped_ptr<TestMaps_MInt32Entry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest::TestIntIntMap >::const_iterator
        it = this->m_int32().begin();
        it != this->m_int32().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(m_int32_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  // map<int64, .protobuf_unittest.TestIntIntMap> m_int64 = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->m_int64_size());
  {
    ::google::protobuf::scoped_ptr<TestMaps_MInt64Entry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int64, ::protobuf_unittest::TestIntIntMap >::const_iterator
        it = this->m_int64().begin();
        it != this->m_int64().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(m_int64_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  // map<uint32, .protobuf_unittest.TestIntIntMap> m_uint32 = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->m_uint32_size());
  {
    ::google::protobuf::scoped_ptr<TestMaps_MUint32Entry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::protobuf_unittest::TestIntIntMap >::const_iterator
        it = this->m_uint32().begin();
        it != this->m_uint32().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(m_uint32_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  // map<uint64, .protobuf_unittest.TestIntIntMap> m_uint64 = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->m_uint64_size());
  {
    ::google::protobuf::scoped_ptr<TestMaps_MUint64Entry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint64, ::protobuf_unittest::TestIntIntMap >::const_iterator
        it = this->m_uint64().begin();
        it != this->m_uint64().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(m_uint64_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  // map<sint32, .protobuf_unittest.TestIntIntMap> m_sint32 = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->m_sint32_size());
  {
    ::google::protobuf::scoped_ptr<TestMaps_MSint32Entry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest::TestIntIntMap >::const_iterator
        it = this->m_sint32().begin();
        it != this->m_sint32().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(m_sint32_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  // map<sint64, .protobuf_unittest.TestIntIntMap> m_sint64 = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->m_sint64_size());
  {
    ::google::protobuf::scoped_ptr<TestMaps_MSint64Entry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int64, ::protobuf_unittest::TestIntIntMap >::const_iterator
        it = this->m_sint64().begin();
        it != this->m_sint64().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(m_sint64_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  // map<fixed32, .protobuf_unittest.TestIntIntMap> m_fixed32 = 7;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->m_fixed32_size());
  {
    ::google::protobuf::scoped_ptr<TestMaps_MFixed32Entry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::protobuf_unittest::TestIntIntMap >::const_iterator
        it = this->m_fixed32().begin();
        it != this->m_fixed32().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(m_fixed32_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  // map<fixed64, .protobuf_unittest.TestIntIntMap> m_fixed64 = 8;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->m_fixed64_size());
  {
    ::google::protobuf::scoped_ptr<TestMaps_MFixed64Entry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint64, ::protobuf_unittest::TestIntIntMap >::const_iterator
        it = this->m_fixed64().begin();
        it != this->m_fixed64().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(m_fixed64_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  // map<sfixed32, .protobuf_unittest.TestIntIntMap> m_sfixed32 = 9;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->m_sfixed32_size());
  {
    ::google::protobuf::scoped_ptr<TestMaps_MSfixed32Entry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest::TestIntIntMap >::const_iterator
        it = this->m_sfixed32().begin();
        it != this->m_sfixed32().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(m_sfixed32_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  // map<sfixed64, .protobuf_unittest.TestIntIntMap> m_sfixed64 = 10;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->m_sfixed64_size());
  {
    ::google::protobuf::scoped_ptr<TestMaps_MSfixed64Entry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int64, ::protobuf_unittest::TestIntIntMap >::const_iterator
        it = this->m_sfixed64().begin();
        it != this->m_sfixed64().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(m_sfixed64_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  // map<bool, .protobuf_unittest.TestIntIntMap> m_bool = 11;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->m_bool_size());
  {
    ::google::protobuf::scoped_ptr<TestMaps_MBoolEntry> entry;
    for (::google::protobuf::Map< bool, ::protobuf_unittest::TestIntIntMap >::const_iterator
        it = this->m_bool().begin();
        it != this->m_bool().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(m_bool_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  // map<string, .protobuf_unittest.TestIntIntMap> m_string = 12;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->m_string_size());
  {
    ::google::protobuf::scoped_ptr<TestMaps_MStringEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::protobuf_unittest::TestIntIntMap >::const_iterator
        it = this->m_string().begin();
        it != this->m_string().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(m_string_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestMaps::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestMaps)
  GOOGLE_DCHECK_NE(&from, this);
  const TestMaps* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TestMaps>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestMaps)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestMaps)
    MergeFrom(*source);
  }
}

void TestMaps::MergeFrom(const TestMaps& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestMaps)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  m_int32_.MergeFrom(from.m_int32_);
  m_int64_.MergeFrom(from.m_int64_);
  m_uint32_.MergeFrom(from.m_uint32_);
  m_uint64_.MergeFrom(from.m_uint64_);
  m_sint32_.MergeFrom(from.m_sint32_);
  m_sint64_.MergeFrom(from.m_sint64_);
  m_fixed32_.MergeFrom(from.m_fixed32_);
  m_fixed64_.MergeFrom(from.m_fixed64_);
  m_sfixed32_.MergeFrom(from.m_sfixed32_);
  m_sfixed64_.MergeFrom(from.m_sfixed64_);
  m_bool_.MergeFrom(from.m_bool_);
  m_string_.MergeFrom(from.m_string_);
}

void TestMaps::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestMaps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMaps::CopyFrom(const TestMaps& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestMaps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMaps::IsInitialized() const {
  return true;
}

void TestMaps::Swap(TestMaps* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TestMaps* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void TestMaps::UnsafeArenaSwap(TestMaps* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TestMaps::InternalSwap(TestMaps* other) {
  m_int32_.Swap(&other->m_int32_);
  m_int64_.Swap(&other->m_int64_);
  m_uint32_.Swap(&other->m_uint32_);
  m_uint64_.Swap(&other->m_uint64_);
  m_sint32_.Swap(&other->m_sint32_);
  m_sint64_.Swap(&other->m_sint64_);
  m_fixed32_.Swap(&other->m_fixed32_);
  m_fixed64_.Swap(&other->m_fixed64_);
  m_sfixed32_.Swap(&other->m_sfixed32_);
  m_sfixed64_.Swap(&other->m_sfixed64_);
  m_bool_.Swap(&other->m_bool_);
  m_string_.Swap(&other->m_string_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TestMaps::GetMetadata() const {
  protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::file_level_metadata[22];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TestMaps

// map<int32, .protobuf_unittest.TestIntIntMap> m_int32 = 1;
int TestMaps::m_int32_size() const {
  return m_int32_.size();
}
void TestMaps::clear_m_int32() {
  m_int32_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest::TestIntIntMap >&
TestMaps::m_int32() const {
  // @@protoc_insertion_point(field_map:protobuf_unittest.TestMaps.m_int32)
  return m_int32_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest::TestIntIntMap >*
TestMaps::mutable_m_int32() {
  // @@protoc_insertion_point(field_mutable_map:protobuf_unittest.TestMaps.m_int32)
  return m_int32_.MutableMap();
}

// map<int64, .protobuf_unittest.TestIntIntMap> m_int64 = 2;
int TestMaps::m_int64_size() const {
  return m_int64_.size();
}
void TestMaps::clear_m_int64() {
  m_int64_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::int64, ::protobuf_unittest::TestIntIntMap >&
TestMaps::m_int64() const {
  // @@protoc_insertion_point(field_map:protobuf_unittest.TestMaps.m_int64)
  return m_int64_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::int64, ::protobuf_unittest::TestIntIntMap >*
TestMaps::mutable_m_int64() {
  // @@protoc_insertion_point(field_mutable_map:protobuf_unittest.TestMaps.m_int64)
  return m_int64_.MutableMap();
}

// map<uint32, .protobuf_unittest.TestIntIntMap> m_uint32 = 3;
int TestMaps::m_uint32_size() const {
  return m_uint32_.size();
}
void TestMaps::clear_m_uint32() {
  m_uint32_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::protobuf_unittest::TestIntIntMap >&
TestMaps::m_uint32() const {
  // @@protoc_insertion_point(field_map:protobuf_unittest.TestMaps.m_uint32)
  return m_uint32_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::protobuf_unittest::TestIntIntMap >*
TestMaps::mutable_m_uint32() {
  // @@protoc_insertion_point(field_mutable_map:protobuf_unittest.TestMaps.m_uint32)
  return m_uint32_.MutableMap();
}

// map<uint64, .protobuf_unittest.TestIntIntMap> m_uint64 = 4;
int TestMaps::m_uint64_size() const {
  return m_uint64_.size();
}
void TestMaps::clear_m_uint64() {
  m_uint64_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint64, ::protobuf_unittest::TestIntIntMap >&
TestMaps::m_uint64() const {
  // @@protoc_insertion_point(field_map:protobuf_unittest.TestMaps.m_uint64)
  return m_uint64_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint64, ::protobuf_unittest::TestIntIntMap >*
TestMaps::mutable_m_uint64() {
  // @@protoc_insertion_point(field_mutable_map:protobuf_unittest.TestMaps.m_uint64)
  return m_uint64_.MutableMap();
}

// map<sint32, .protobuf_unittest.TestIntIntMap> m_sint32 = 5;
int TestMaps::m_sint32_size() const {
  return m_sint32_.size();
}
void TestMaps::clear_m_sint32() {
  m_sint32_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest::TestIntIntMap >&
TestMaps::m_sint32() const {
  // @@protoc_insertion_point(field_map:protobuf_unittest.TestMaps.m_sint32)
  return m_sint32_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest::TestIntIntMap >*
TestMaps::mutable_m_sint32() {
  // @@protoc_insertion_point(field_mutable_map:protobuf_unittest.TestMaps.m_sint32)
  return m_sint32_.MutableMap();
}

// map<sint64, .protobuf_unittest.TestIntIntMap> m_sint64 = 6;
int TestMaps::m_sint64_size() const {
  return m_sint64_.size();
}
void TestMaps::clear_m_sint64() {
  m_sint64_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::int64, ::protobuf_unittest::TestIntIntMap >&
TestMaps::m_sint64() const {
  // @@protoc_insertion_point(field_map:protobuf_unittest.TestMaps.m_sint64)
  return m_sint64_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::int64, ::protobuf_unittest::TestIntIntMap >*
TestMaps::mutable_m_sint64() {
  // @@protoc_insertion_point(field_mutable_map:protobuf_unittest.TestMaps.m_sint64)
  return m_sint64_.MutableMap();
}

// map<fixed32, .protobuf_unittest.TestIntIntMap> m_fixed32 = 7;
int TestMaps::m_fixed32_size() const {
  return m_fixed32_.size();
}
void TestMaps::clear_m_fixed32() {
  m_fixed32_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::protobuf_unittest::TestIntIntMap >&
TestMaps::m_fixed32() const {
  // @@protoc_insertion_point(field_map:protobuf_unittest.TestMaps.m_fixed32)
  return m_fixed32_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::protobuf_unittest::TestIntIntMap >*
TestMaps::mutable_m_fixed32() {
  // @@protoc_insertion_point(field_mutable_map:protobuf_unittest.TestMaps.m_fixed32)
  return m_fixed32_.MutableMap();
}

// map<fixed64, .protobuf_unittest.TestIntIntMap> m_fixed64 = 8;
int TestMaps::m_fixed64_size() const {
  return m_fixed64_.size();
}
void TestMaps::clear_m_fixed64() {
  m_fixed64_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint64, ::protobuf_unittest::TestIntIntMap >&
TestMaps::m_fixed64() const {
  // @@protoc_insertion_point(field_map:protobuf_unittest.TestMaps.m_fixed64)
  return m_fixed64_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint64, ::protobuf_unittest::TestIntIntMap >*
TestMaps::mutable_m_fixed64() {
  // @@protoc_insertion_point(field_mutable_map:protobuf_unittest.TestMaps.m_fixed64)
  return m_fixed64_.MutableMap();
}

// map<sfixed32, .protobuf_unittest.TestIntIntMap> m_sfixed32 = 9;
int TestMaps::m_sfixed32_size() const {
  return m_sfixed32_.size();
}
void TestMaps::clear_m_sfixed32() {
  m_sfixed32_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest::TestIntIntMap >&
TestMaps::m_sfixed32() const {
  // @@protoc_insertion_point(field_map:protobuf_unittest.TestMaps.m_sfixed32)
  return m_sfixed32_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::int32, ::protobuf_unittest::TestIntIntMap >*
TestMaps::mutable_m_sfixed32() {
  // @@protoc_insertion_point(field_mutable_map:protobuf_unittest.TestMaps.m_sfixed32)
  return m_sfixed32_.MutableMap();
}

// map<sfixed64, .protobuf_unittest.TestIntIntMap> m_sfixed64 = 10;
int TestMaps::m_sfixed64_size() const {
  return m_sfixed64_.size();
}
void TestMaps::clear_m_sfixed64() {
  m_sfixed64_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::int64, ::protobuf_unittest::TestIntIntMap >&
TestMaps::m_sfixed64() const {
  // @@protoc_insertion_point(field_map:protobuf_unittest.TestMaps.m_sfixed64)
  return m_sfixed64_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::int64, ::protobuf_unittest::TestIntIntMap >*
TestMaps::mutable_m_sfixed64() {
  // @@protoc_insertion_point(field_mutable_map:protobuf_unittest.TestMaps.m_sfixed64)
  return m_sfixed64_.MutableMap();
}

// map<bool, .protobuf_unittest.TestIntIntMap> m_bool = 11;
int TestMaps::m_bool_size() const {
  return m_bool_.size();
}
void TestMaps::clear_m_bool() {
  m_bool_.Clear();
}
 const ::google::protobuf::Map< bool, ::protobuf_unittest::TestIntIntMap >&
TestMaps::m_bool() const {
  // @@protoc_insertion_point(field_map:protobuf_unittest.TestMaps.m_bool)
  return m_bool_.GetMap();
}
 ::google::protobuf::Map< bool, ::protobuf_unittest::TestIntIntMap >*
TestMaps::mutable_m_bool() {
  // @@protoc_insertion_point(field_mutable_map:protobuf_unittest.TestMaps.m_bool)
  return m_bool_.MutableMap();
}

// map<string, .protobuf_unittest.TestIntIntMap> m_string = 12;
int TestMaps::m_string_size() const {
  return m_string_.size();
}
void TestMaps::clear_m_string() {
  m_string_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::protobuf_unittest::TestIntIntMap >&
TestMaps::m_string() const {
  // @@protoc_insertion_point(field_map:protobuf_unittest.TestMaps.m_string)
  return m_string_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::protobuf_unittest::TestIntIntMap >*
TestMaps::mutable_m_string() {
  // @@protoc_insertion_point(field_mutable_map:protobuf_unittest.TestMaps.m_string)
  return m_string_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf_unittest

// @@protoc_insertion_point(global_scope)
