// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_data_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_data_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_data_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_data_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
void AddDescriptors_data_2eproto();
namespace RectData {
class ObjectParam;
class ObjectParamDefaultTypeInternal;
extern ObjectParamDefaultTypeInternal _ObjectParam_default_instance_;
class PictureData;
class PictureDataDefaultTypeInternal;
extern PictureDataDefaultTypeInternal _PictureData_default_instance_;
}  // namespace RectData
PROTOBUF_NAMESPACE_OPEN
template<> ::RectData::ObjectParam* Arena::CreateMaybeMessage<::RectData::ObjectParam>(Arena*);
template<> ::RectData::PictureData* Arena::CreateMaybeMessage<::RectData::PictureData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace RectData {

// ===================================================================

class PictureData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RectData.PictureData) */ {
 public:
  PictureData();
  virtual ~PictureData();

  PictureData(const PictureData& from);
  PictureData(PictureData&& from) noexcept
    : PictureData() {
    *this = ::std::move(from);
  }

  inline PictureData& operator=(const PictureData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PictureData& operator=(PictureData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PictureData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PictureData* internal_default_instance() {
    return reinterpret_cast<const PictureData*>(
               &_PictureData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(PictureData* other);
  friend void swap(PictureData& a, PictureData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PictureData* New() const final {
    return CreateMaybeMessage<PictureData>(nullptr);
  }

  PictureData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PictureData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PictureData& from);
  void MergeFrom(const PictureData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PictureData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RectData.PictureData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .RectData.ObjectParam object_parameter = 3;
  int object_parameter_size() const;
  void clear_object_parameter();
  static const int kObjectParameterFieldNumber = 3;
  ::RectData::ObjectParam* mutable_object_parameter(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RectData::ObjectParam >*
      mutable_object_parameter();
  const ::RectData::ObjectParam& object_parameter(int index) const;
  ::RectData::ObjectParam* add_object_parameter();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RectData::ObjectParam >&
      object_parameter() const;

  // required int32 height = 1;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 width = 2;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:RectData.PictureData)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RectData::ObjectParam > object_parameter_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class ObjectParam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RectData.ObjectParam) */ {
 public:
  ObjectParam();
  virtual ~ObjectParam();

  ObjectParam(const ObjectParam& from);
  ObjectParam(ObjectParam&& from) noexcept
    : ObjectParam() {
    *this = ::std::move(from);
  }

  inline ObjectParam& operator=(const ObjectParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectParam& operator=(ObjectParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ObjectParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObjectParam* internal_default_instance() {
    return reinterpret_cast<const ObjectParam*>(
               &_ObjectParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ObjectParam* other);
  friend void swap(ObjectParam& a, ObjectParam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ObjectParam* New() const final {
    return CreateMaybeMessage<ObjectParam>(nullptr);
  }

  ObjectParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjectParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjectParam& from);
  void MergeFrom(const ObjectParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RectData.ObjectParam";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string tag = 1;
  int tag_size() const;
  void clear_tag();
  static const int kTagFieldNumber = 1;
  const std::string& tag(int index) const;
  std::string* mutable_tag(int index);
  void set_tag(int index, const std::string& value);
  void set_tag(int index, std::string&& value);
  void set_tag(int index, const char* value);
  void set_tag(int index, const char* value, size_t size);
  std::string* add_tag();
  void add_tag(const std::string& value);
  void add_tag(std::string&& value);
  void add_tag(const char* value);
  void add_tag(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tag() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tag();

  // required int32 xmin = 2;
  bool has_xmin() const;
  void clear_xmin();
  static const int kXminFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 xmin() const;
  void set_xmin(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 ymin = 3;
  bool has_ymin() const;
  void clear_ymin();
  static const int kYminFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 ymin() const;
  void set_ymin(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 xmax = 4;
  bool has_xmax() const;
  void clear_xmax();
  static const int kXmaxFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 xmax() const;
  void set_xmax(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 ymax = 5;
  bool has_ymax() const;
  void clear_ymax();
  static const int kYmaxFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int32 ymax() const;
  void set_ymax(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:RectData.ObjectParam)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tag_;
  ::PROTOBUF_NAMESPACE_ID::int32 xmin_;
  ::PROTOBUF_NAMESPACE_ID::int32 ymin_;
  ::PROTOBUF_NAMESPACE_ID::int32 xmax_;
  ::PROTOBUF_NAMESPACE_ID::int32 ymax_;
  friend struct ::TableStruct_data_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PictureData

// required int32 height = 1;
inline bool PictureData::has_height() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PictureData::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PictureData::height() const {
  // @@protoc_insertion_point(field_get:RectData.PictureData.height)
  return height_;
}
inline void PictureData::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  height_ = value;
  // @@protoc_insertion_point(field_set:RectData.PictureData.height)
}

// required int32 width = 2;
inline bool PictureData::has_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PictureData::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PictureData::width() const {
  // @@protoc_insertion_point(field_get:RectData.PictureData.width)
  return width_;
}
inline void PictureData::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  width_ = value;
  // @@protoc_insertion_point(field_set:RectData.PictureData.width)
}

// repeated .RectData.ObjectParam object_parameter = 3;
inline int PictureData::object_parameter_size() const {
  return object_parameter_.size();
}
inline void PictureData::clear_object_parameter() {
  object_parameter_.Clear();
}
inline ::RectData::ObjectParam* PictureData::mutable_object_parameter(int index) {
  // @@protoc_insertion_point(field_mutable:RectData.PictureData.object_parameter)
  return object_parameter_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RectData::ObjectParam >*
PictureData::mutable_object_parameter() {
  // @@protoc_insertion_point(field_mutable_list:RectData.PictureData.object_parameter)
  return &object_parameter_;
}
inline const ::RectData::ObjectParam& PictureData::object_parameter(int index) const {
  // @@protoc_insertion_point(field_get:RectData.PictureData.object_parameter)
  return object_parameter_.Get(index);
}
inline ::RectData::ObjectParam* PictureData::add_object_parameter() {
  // @@protoc_insertion_point(field_add:RectData.PictureData.object_parameter)
  return object_parameter_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RectData::ObjectParam >&
PictureData::object_parameter() const {
  // @@protoc_insertion_point(field_list:RectData.PictureData.object_parameter)
  return object_parameter_;
}

// -------------------------------------------------------------------

// ObjectParam

// repeated string tag = 1;
inline int ObjectParam::tag_size() const {
  return tag_.size();
}
inline void ObjectParam::clear_tag() {
  tag_.Clear();
}
inline const std::string& ObjectParam::tag(int index) const {
  // @@protoc_insertion_point(field_get:RectData.ObjectParam.tag)
  return tag_.Get(index);
}
inline std::string* ObjectParam::mutable_tag(int index) {
  // @@protoc_insertion_point(field_mutable:RectData.ObjectParam.tag)
  return tag_.Mutable(index);
}
inline void ObjectParam::set_tag(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:RectData.ObjectParam.tag)
  tag_.Mutable(index)->assign(value);
}
inline void ObjectParam::set_tag(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:RectData.ObjectParam.tag)
  tag_.Mutable(index)->assign(std::move(value));
}
inline void ObjectParam::set_tag(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tag_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:RectData.ObjectParam.tag)
}
inline void ObjectParam::set_tag(int index, const char* value, size_t size) {
  tag_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RectData.ObjectParam.tag)
}
inline std::string* ObjectParam::add_tag() {
  // @@protoc_insertion_point(field_add_mutable:RectData.ObjectParam.tag)
  return tag_.Add();
}
inline void ObjectParam::add_tag(const std::string& value) {
  tag_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:RectData.ObjectParam.tag)
}
inline void ObjectParam::add_tag(std::string&& value) {
  tag_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:RectData.ObjectParam.tag)
}
inline void ObjectParam::add_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tag_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:RectData.ObjectParam.tag)
}
inline void ObjectParam::add_tag(const char* value, size_t size) {
  tag_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:RectData.ObjectParam.tag)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ObjectParam::tag() const {
  // @@protoc_insertion_point(field_list:RectData.ObjectParam.tag)
  return tag_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ObjectParam::mutable_tag() {
  // @@protoc_insertion_point(field_mutable_list:RectData.ObjectParam.tag)
  return &tag_;
}

// required int32 xmin = 2;
inline bool ObjectParam::has_xmin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ObjectParam::clear_xmin() {
  xmin_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObjectParam::xmin() const {
  // @@protoc_insertion_point(field_get:RectData.ObjectParam.xmin)
  return xmin_;
}
inline void ObjectParam::set_xmin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  xmin_ = value;
  // @@protoc_insertion_point(field_set:RectData.ObjectParam.xmin)
}

// required int32 ymin = 3;
inline bool ObjectParam::has_ymin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ObjectParam::clear_ymin() {
  ymin_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObjectParam::ymin() const {
  // @@protoc_insertion_point(field_get:RectData.ObjectParam.ymin)
  return ymin_;
}
inline void ObjectParam::set_ymin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  ymin_ = value;
  // @@protoc_insertion_point(field_set:RectData.ObjectParam.ymin)
}

// required int32 xmax = 4;
inline bool ObjectParam::has_xmax() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ObjectParam::clear_xmax() {
  xmax_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObjectParam::xmax() const {
  // @@protoc_insertion_point(field_get:RectData.ObjectParam.xmax)
  return xmax_;
}
inline void ObjectParam::set_xmax(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  xmax_ = value;
  // @@protoc_insertion_point(field_set:RectData.ObjectParam.xmax)
}

// required int32 ymax = 5;
inline bool ObjectParam::has_ymax() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ObjectParam::clear_ymax() {
  ymax_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObjectParam::ymax() const {
  // @@protoc_insertion_point(field_get:RectData.ObjectParam.ymax)
  return ymax_;
}
inline void ObjectParam::set_ymax(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  ymax_ = value;
  // @@protoc_insertion_point(field_set:RectData.ObjectParam.ymax)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace RectData

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_data_2eproto
