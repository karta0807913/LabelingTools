// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace RectData {

namespace {

const ::google::protobuf::Descriptor* PictureData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PictureData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectParam_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_data_2eproto() {
  protobuf_AddDesc_data_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "data.proto");
  GOOGLE_CHECK(file != NULL);
  PictureData_descriptor_ = file->message_type(0);
  static const int PictureData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureData, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureData, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureData, object_parameter_),
  };
  PictureData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PictureData_descriptor_,
      PictureData::default_instance_,
      PictureData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PictureData));
  ObjectParam_descriptor_ = file->message_type(1);
  static const int ObjectParam_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectParam, tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectParam, xmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectParam, ymin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectParam, xmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectParam, ymax_),
  };
  ObjectParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjectParam_descriptor_,
      ObjectParam::default_instance_,
      ObjectParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjectParam));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_data_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PictureData_descriptor_, &PictureData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjectParam_descriptor_, &ObjectParam::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_data_2eproto() {
  delete PictureData::default_instance_;
  delete PictureData_reflection_;
  delete ObjectParam::default_instance_;
  delete ObjectParam_reflection_;
}

void protobuf_AddDesc_data_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ndata.proto\022\010RectData\"]\n\013PictureData\022\016\n"
    "\006height\030\001 \002(\005\022\r\n\005width\030\002 \002(\005\022/\n\020object_p"
    "arameter\030\003 \003(\0132\025.RectData.ObjectParam\"R\n"
    "\013ObjectParam\022\013\n\003tag\030\001 \003(\t\022\014\n\004xmin\030\002 \002(\005\022"
    "\014\n\004ymin\030\003 \002(\005\022\014\n\004xmax\030\004 \002(\005\022\014\n\004ymax\030\005 \002("
    "\005", 201);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "data.proto", &protobuf_RegisterTypes);
  PictureData::default_instance_ = new PictureData();
  ObjectParam::default_instance_ = new ObjectParam();
  PictureData::default_instance_->InitAsDefaultInstance();
  ObjectParam::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_data_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_data_2eproto {
  StaticDescriptorInitializer_data_2eproto() {
    protobuf_AddDesc_data_2eproto();
  }
} static_descriptor_initializer_data_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PictureData::kHeightFieldNumber;
const int PictureData::kWidthFieldNumber;
const int PictureData::kObjectParameterFieldNumber;
#endif  // !_MSC_VER

PictureData::PictureData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RectData.PictureData)
}

void PictureData::InitAsDefaultInstance() {
}

PictureData::PictureData(const PictureData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RectData.PictureData)
}

void PictureData::SharedCtor() {
  _cached_size_ = 0;
  height_ = 0;
  width_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PictureData::~PictureData() {
  // @@protoc_insertion_point(destructor:RectData.PictureData)
  SharedDtor();
}

void PictureData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PictureData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PictureData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PictureData_descriptor_;
}

const PictureData& PictureData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2eproto();
  return *default_instance_;
}

PictureData* PictureData::default_instance_ = NULL;

PictureData* PictureData::New() const {
  return new PictureData;
}

void PictureData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PictureData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(height_, width_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  object_parameter_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PictureData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RectData.PictureData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 height = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_width;
        break;
      }

      // required int32 width = 2;
      case 2: {
        if (tag == 16) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_object_parameter;
        break;
      }

      // repeated .RectData.ObjectParam object_parameter = 3;
      case 3: {
        if (tag == 26) {
         parse_object_parameter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_object_parameter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_object_parameter;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RectData.PictureData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RectData.PictureData)
  return false;
#undef DO_
}

void PictureData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RectData.PictureData)
  // required int32 height = 1;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->height(), output);
  }

  // required int32 width = 2;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->width(), output);
  }

  // repeated .RectData.ObjectParam object_parameter = 3;
  for (int i = 0; i < this->object_parameter_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->object_parameter(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RectData.PictureData)
}

::google::protobuf::uint8* PictureData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RectData.PictureData)
  // required int32 height = 1;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->height(), target);
  }

  // required int32 width = 2;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->width(), target);
  }

  // repeated .RectData.ObjectParam object_parameter = 3;
  for (int i = 0; i < this->object_parameter_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->object_parameter(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RectData.PictureData)
  return target;
}

int PictureData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 height = 1;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // required int32 width = 2;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

  }
  // repeated .RectData.ObjectParam object_parameter = 3;
  total_size += 1 * this->object_parameter_size();
  for (int i = 0; i < this->object_parameter_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->object_parameter(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PictureData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PictureData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PictureData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PictureData::MergeFrom(const PictureData& from) {
  GOOGLE_CHECK_NE(&from, this);
  object_parameter_.MergeFrom(from.object_parameter_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PictureData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PictureData::CopyFrom(const PictureData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PictureData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->object_parameter())) return false;
  return true;
}

void PictureData::Swap(PictureData* other) {
  if (other != this) {
    std::swap(height_, other->height_);
    std::swap(width_, other->width_);
    object_parameter_.Swap(&other->object_parameter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PictureData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PictureData_descriptor_;
  metadata.reflection = PictureData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ObjectParam::kTagFieldNumber;
const int ObjectParam::kXminFieldNumber;
const int ObjectParam::kYminFieldNumber;
const int ObjectParam::kXmaxFieldNumber;
const int ObjectParam::kYmaxFieldNumber;
#endif  // !_MSC_VER

ObjectParam::ObjectParam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RectData.ObjectParam)
}

void ObjectParam::InitAsDefaultInstance() {
}

ObjectParam::ObjectParam(const ObjectParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RectData.ObjectParam)
}

void ObjectParam::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  xmin_ = 0;
  ymin_ = 0;
  xmax_ = 0;
  ymax_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectParam::~ObjectParam() {
  // @@protoc_insertion_point(destructor:RectData.ObjectParam)
  SharedDtor();
}

void ObjectParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ObjectParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectParam_descriptor_;
}

const ObjectParam& ObjectParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2eproto();
  return *default_instance_;
}

ObjectParam* ObjectParam::default_instance_ = NULL;

ObjectParam* ObjectParam::New() const {
  return new ObjectParam;
}

void ObjectParam::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ObjectParam*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(xmin_, ymax_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  tag_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObjectParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RectData.ObjectParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string tag = 1;
      case 1: {
        if (tag == 10) {
         parse_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tag(this->tag_size() - 1).data(),
            this->tag(this->tag_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tag");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_tag;
        if (input->ExpectTag(16)) goto parse_xmin;
        break;
      }

      // required int32 xmin = 2;
      case 2: {
        if (tag == 16) {
         parse_xmin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xmin_)));
          set_has_xmin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ymin;
        break;
      }

      // required int32 ymin = 3;
      case 3: {
        if (tag == 24) {
         parse_ymin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ymin_)));
          set_has_ymin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_xmax;
        break;
      }

      // required int32 xmax = 4;
      case 4: {
        if (tag == 32) {
         parse_xmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xmax_)));
          set_has_xmax();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ymax;
        break;
      }

      // required int32 ymax = 5;
      case 5: {
        if (tag == 40) {
         parse_ymax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ymax_)));
          set_has_ymax();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RectData.ObjectParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RectData.ObjectParam)
  return false;
#undef DO_
}

void ObjectParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RectData.ObjectParam)
  // repeated string tag = 1;
  for (int i = 0; i < this->tag_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->tag(i).data(), this->tag(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "tag");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->tag(i), output);
  }

  // required int32 xmin = 2;
  if (has_xmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->xmin(), output);
  }

  // required int32 ymin = 3;
  if (has_ymin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ymin(), output);
  }

  // required int32 xmax = 4;
  if (has_xmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->xmax(), output);
  }

  // required int32 ymax = 5;
  if (has_ymax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ymax(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RectData.ObjectParam)
}

::google::protobuf::uint8* ObjectParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RectData.ObjectParam)
  // repeated string tag = 1;
  for (int i = 0; i < this->tag_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag(i).data(), this->tag(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tag");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->tag(i), target);
  }

  // required int32 xmin = 2;
  if (has_xmin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->xmin(), target);
  }

  // required int32 ymin = 3;
  if (has_ymin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ymin(), target);
  }

  // required int32 xmax = 4;
  if (has_xmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->xmax(), target);
  }

  // required int32 ymax = 5;
  if (has_ymax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ymax(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RectData.ObjectParam)
  return target;
}

int ObjectParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int32 xmin = 2;
    if (has_xmin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xmin());
    }

    // required int32 ymin = 3;
    if (has_ymin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ymin());
    }

    // required int32 xmax = 4;
    if (has_xmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xmax());
    }

    // required int32 ymax = 5;
    if (has_ymax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ymax());
    }

  }
  // repeated string tag = 1;
  total_size += 1 * this->tag_size();
  for (int i = 0; i < this->tag_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tag(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObjectParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObjectParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjectParam::MergeFrom(const ObjectParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  tag_.MergeFrom(from.tag_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_xmin()) {
      set_xmin(from.xmin());
    }
    if (from.has_ymin()) {
      set_ymin(from.ymin());
    }
    if (from.has_xmax()) {
      set_xmax(from.xmax());
    }
    if (from.has_ymax()) {
      set_ymax(from.ymax());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObjectParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectParam::CopyFrom(const ObjectParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001e) != 0x0000001e) return false;

  return true;
}

void ObjectParam::Swap(ObjectParam* other) {
  if (other != this) {
    tag_.Swap(&other->tag_);
    std::swap(xmin_, other->xmin_);
    std::swap(ymin_, other->ymin_);
    std::swap(xmax_, other->xmax_);
    std::swap(ymax_, other->ymax_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObjectParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectParam_descriptor_;
  metadata.reflection = ObjectParam_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace RectData

// @@protoc_insertion_point(global_scope)
