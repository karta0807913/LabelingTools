// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data.proto

#include "data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_data_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ObjectParam_data_2eproto;
namespace RectData {
class PictureDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PictureData> _instance;
} _PictureData_default_instance_;
class ObjectParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObjectParam> _instance;
} _ObjectParam_default_instance_;
}  // namespace RectData
static void InitDefaultsPictureData_data_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RectData::_PictureData_default_instance_;
    new (ptr) ::RectData::PictureData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RectData::PictureData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PictureData_data_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPictureData_data_2eproto}, {
      &scc_info_ObjectParam_data_2eproto.base,}};

static void InitDefaultsObjectParam_data_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RectData::_ObjectParam_default_instance_;
    new (ptr) ::RectData::ObjectParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RectData::ObjectParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ObjectParam_data_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsObjectParam_data_2eproto}, {}};

void InitDefaults_data_2eproto() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PictureData_data_2eproto.base);
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObjectParam_data_2eproto.base);
}

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_data_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_data_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_data_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_data_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::RectData::PictureData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::RectData::PictureData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RectData::PictureData, height_),
  PROTOBUF_FIELD_OFFSET(::RectData::PictureData, width_),
  PROTOBUF_FIELD_OFFSET(::RectData::PictureData, object_parameter_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::RectData::ObjectParam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::RectData::ObjectParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RectData::ObjectParam, tag_),
  PROTOBUF_FIELD_OFFSET(::RectData::ObjectParam, xmin_),
  PROTOBUF_FIELD_OFFSET(::RectData::ObjectParam, ymin_),
  PROTOBUF_FIELD_OFFSET(::RectData::ObjectParam, xmax_),
  PROTOBUF_FIELD_OFFSET(::RectData::ObjectParam, ymax_),
  ~0u,
  0,
  1,
  2,
  3,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::RectData::PictureData)},
  { 11, 21, sizeof(::RectData::ObjectParam)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RectData::_PictureData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RectData::_ObjectParam_default_instance_),
};

static ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptorsTable assign_descriptors_table_data_2eproto = {
  {}, AddDescriptors_data_2eproto, "data.proto", schemas,
  file_default_instances, TableStruct_data_2eproto::offsets,
  file_level_metadata_data_2eproto, 2, file_level_enum_descriptors_data_2eproto, file_level_service_descriptors_data_2eproto,
};

const char descriptor_table_protodef_data_2eproto[] =
  "\n\ndata.proto\022\010RectData\"]\n\013PictureData\022\016\n"
  "\006height\030\001 \002(\005\022\r\n\005width\030\002 \002(\005\022/\n\020object_p"
  "arameter\030\003 \003(\0132\025.RectData.ObjectParam\"R\n"
  "\013ObjectParam\022\013\n\003tag\030\001 \003(\t\022\014\n\004xmin\030\002 \002(\005\022"
  "\014\n\004ymin\030\003 \002(\005\022\014\n\004xmax\030\004 \002(\005\022\014\n\004ymax\030\005 \002("
  "\005"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_data_2eproto = {
  false, InitDefaults_data_2eproto, 
  descriptor_table_protodef_data_2eproto,
  "data.proto", &assign_descriptors_table_data_2eproto, 201,
};

void AddDescriptors_data_2eproto() {
  static constexpr ::PROTOBUF_NAMESPACE_ID::internal::InitFunc deps[1] =
  {
  };
 ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_data_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_data_2eproto = []() { AddDescriptors_data_2eproto(); return true; }();
namespace RectData {

// ===================================================================

void PictureData::InitAsDefaultInstance() {
}
class PictureData::HasBitSetters {
 public:
  static void set_has_height(PictureData* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_width(PictureData* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PictureData::kHeightFieldNumber;
const int PictureData::kWidthFieldNumber;
const int PictureData::kObjectParameterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PictureData::PictureData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RectData.PictureData)
}
PictureData::PictureData(const PictureData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      object_parameter_(from.object_parameter_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&width_) -
    reinterpret_cast<char*>(&height_)) + sizeof(width_));
  // @@protoc_insertion_point(copy_constructor:RectData.PictureData)
}

void PictureData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_PictureData_data_2eproto.base);
  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&width_) -
      reinterpret_cast<char*>(&height_)) + sizeof(width_));
}

PictureData::~PictureData() {
  // @@protoc_insertion_point(destructor:RectData.PictureData)
  SharedDtor();
}

void PictureData::SharedDtor() {
}

void PictureData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PictureData& PictureData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PictureData_data_2eproto.base);
  return *internal_default_instance();
}


void PictureData::Clear() {
// @@protoc_insertion_point(message_clear_start:RectData.PictureData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_parameter_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&height_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&width_) -
        reinterpret_cast<char*>(&height_)) + sizeof(width_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PictureData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required int32 height = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 8) goto handle_unusual;
        set_height(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int32 width = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 16) goto handle_unusual;
        set_width(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .RectData.ObjectParam object_parameter = 3;
      case 3: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ctx->ParseMessage(add_object_parameter(), ptr);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ctx->Done(&ptr)) return ptr;
        } while ((::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag,
          _internal_metadata_.mutable_unknown_fields(), ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PictureData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:RectData.PictureData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 height = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_height(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 width = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_width(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .RectData.ObjectParam object_parameter = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_object_parameter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RectData.PictureData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RectData.PictureData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PictureData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RectData.PictureData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 height = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->height(), output);
  }

  // required int32 width = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->width(), output);
  }

  // repeated .RectData.ObjectParam object_parameter = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->object_parameter_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->object_parameter(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RectData.PictureData)
}

::PROTOBUF_NAMESPACE_ID::uint8* PictureData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RectData.PictureData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 height = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->height(), target);
  }

  // required int32 width = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->width(), target);
  }

  // repeated .RectData.ObjectParam object_parameter = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->object_parameter_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->object_parameter(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RectData.PictureData)
  return target;
}

size_t PictureData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RectData.PictureData)
  size_t total_size = 0;

  if (has_height()) {
    // required int32 height = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->height());
  }

  if (has_width()) {
    // required int32 width = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->width());
  }

  return total_size;
}
size_t PictureData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RectData.PictureData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 height = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->height());

    // required int32 width = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->width());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .RectData.ObjectParam object_parameter = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->object_parameter_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->object_parameter(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PictureData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RectData.PictureData)
  GOOGLE_DCHECK_NE(&from, this);
  const PictureData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PictureData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RectData.PictureData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RectData.PictureData)
    MergeFrom(*source);
  }
}

void PictureData::MergeFrom(const PictureData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RectData.PictureData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  object_parameter_.MergeFrom(from.object_parameter_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000002u) {
      width_ = from.width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PictureData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RectData.PictureData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PictureData::CopyFrom(const PictureData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RectData.PictureData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PictureData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->object_parameter())) return false;
  return true;
}

void PictureData::Swap(PictureData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PictureData::InternalSwap(PictureData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&object_parameter_)->InternalSwap(CastToBase(&other->object_parameter_));
  swap(height_, other->height_);
  swap(width_, other->width_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PictureData::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_data_2eproto);
  return ::file_level_metadata_data_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ObjectParam::InitAsDefaultInstance() {
}
class ObjectParam::HasBitSetters {
 public:
  static void set_has_xmin(ObjectParam* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_ymin(ObjectParam* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_xmax(ObjectParam* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_ymax(ObjectParam* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObjectParam::kTagFieldNumber;
const int ObjectParam::kXminFieldNumber;
const int ObjectParam::kYminFieldNumber;
const int ObjectParam::kXmaxFieldNumber;
const int ObjectParam::kYmaxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectParam::ObjectParam()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RectData.ObjectParam)
}
ObjectParam::ObjectParam(const ObjectParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      tag_(from.tag_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&xmin_, &from.xmin_,
    static_cast<size_t>(reinterpret_cast<char*>(&ymax_) -
    reinterpret_cast<char*>(&xmin_)) + sizeof(ymax_));
  // @@protoc_insertion_point(copy_constructor:RectData.ObjectParam)
}

void ObjectParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_ObjectParam_data_2eproto.base);
  ::memset(&xmin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ymax_) -
      reinterpret_cast<char*>(&xmin_)) + sizeof(ymax_));
}

ObjectParam::~ObjectParam() {
  // @@protoc_insertion_point(destructor:RectData.ObjectParam)
  SharedDtor();
}

void ObjectParam::SharedDtor() {
}

void ObjectParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObjectParam& ObjectParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObjectParam_data_2eproto.base);
  return *internal_default_instance();
}


void ObjectParam::Clear() {
// @@protoc_insertion_point(message_clear_start:RectData.ObjectParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tag_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&xmin_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ymax_) -
        reinterpret_cast<char*>(&xmin_)) + sizeof(ymax_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ObjectParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated string tag = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(add_tag(), ptr, ctx, "RectData.ObjectParam.tag");
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ctx->Done(&ptr)) return ptr;
        } while ((::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // required int32 xmin = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 16) goto handle_unusual;
        set_xmin(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int32 ymin = 3;
      case 3: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 24) goto handle_unusual;
        set_ymin(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int32 xmax = 4;
      case 4: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 32) goto handle_unusual;
        set_xmax(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int32 ymax = 5;
      case 5: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 40) goto handle_unusual;
        set_ymax(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag,
          _internal_metadata_.mutable_unknown_fields(), ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ObjectParam::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:RectData.ObjectParam)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string tag = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_tag()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tag(this->tag_size() - 1).data(),
            static_cast<int>(this->tag(this->tag_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "RectData.ObjectParam.tag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 xmin = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_xmin(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &xmin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 ymin = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_ymin(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &ymin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 xmax = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_xmax(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &xmax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 ymax = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_ymax(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &ymax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RectData.ObjectParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RectData.ObjectParam)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ObjectParam::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RectData.ObjectParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string tag = 1;
  for (int i = 0, n = this->tag_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag(i).data(), static_cast<int>(this->tag(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "RectData.ObjectParam.tag");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      1, this->tag(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // required int32 xmin = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->xmin(), output);
  }

  // required int32 ymin = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->ymin(), output);
  }

  // required int32 xmax = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->xmax(), output);
  }

  // required int32 ymax = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->ymax(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RectData.ObjectParam)
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectParam::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RectData.ObjectParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string tag = 1;
  for (int i = 0, n = this->tag_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag(i).data(), static_cast<int>(this->tag(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "RectData.ObjectParam.tag");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(1, this->tag(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // required int32 xmin = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->xmin(), target);
  }

  // required int32 ymin = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->ymin(), target);
  }

  // required int32 xmax = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->xmax(), target);
  }

  // required int32 ymax = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->ymax(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RectData.ObjectParam)
  return target;
}

size_t ObjectParam::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RectData.ObjectParam)
  size_t total_size = 0;

  if (has_xmin()) {
    // required int32 xmin = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->xmin());
  }

  if (has_ymin()) {
    // required int32 ymin = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->ymin());
  }

  if (has_xmax()) {
    // required int32 xmax = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->xmax());
  }

  if (has_ymax()) {
    // required int32 ymax = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->ymax());
  }

  return total_size;
}
size_t ObjectParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RectData.ObjectParam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int32 xmin = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->xmin());

    // required int32 ymin = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->ymin());

    // required int32 xmax = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->xmax());

    // required int32 ymax = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->ymax());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string tag = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->tag_size());
  for (int i = 0, n = this->tag_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->tag(i));
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RectData.ObjectParam)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RectData.ObjectParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RectData.ObjectParam)
    MergeFrom(*source);
  }
}

void ObjectParam::MergeFrom(const ObjectParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RectData.ObjectParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tag_.MergeFrom(from.tag_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      xmin_ = from.xmin_;
    }
    if (cached_has_bits & 0x00000002u) {
      ymin_ = from.ymin_;
    }
    if (cached_has_bits & 0x00000004u) {
      xmax_ = from.xmax_;
    }
    if (cached_has_bits & 0x00000008u) {
      ymax_ = from.ymax_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ObjectParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RectData.ObjectParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectParam::CopyFrom(const ObjectParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RectData.ObjectParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void ObjectParam::Swap(ObjectParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectParam::InternalSwap(ObjectParam* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tag_.InternalSwap(CastToBase(&other->tag_));
  swap(xmin_, other->xmin_);
  swap(ymin_, other->ymin_);
  swap(xmax_, other->xmax_);
  swap(ymax_, other->ymax_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectParam::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_data_2eproto);
  return ::file_level_metadata_data_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace RectData
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::RectData::PictureData* Arena::CreateMaybeMessage< ::RectData::PictureData >(Arena* arena) {
  return Arena::CreateInternal< ::RectData::PictureData >(arena);
}
template<> PROTOBUF_NOINLINE ::RectData::ObjectParam* Arena::CreateMaybeMessage< ::RectData::ObjectParam >(Arena* arena) {
  return Arena::CreateInternal< ::RectData::ObjectParam >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
